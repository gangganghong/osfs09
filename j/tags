!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALT_L	include/sys/keyboard.h	48;"	d
ALT_R	include/sys/keyboard.h	49;"	d
ANY	include/sys/const.h	108;"	d
APPS	include/sys/keyboard.h	41;"	d
ARDStruct	boot/loader.asm	/^ARDStruct		equ	LOADER_PHY_ADDR + _ARDStruct$/;"	d
ASM	Makefile	/^ASM		= nasm$/;"	m
ASMBFLAGS	Makefile	/^ASMBFLAGS	= -I boot\/include\/$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	= -I include\/ -I include\/sys\/ -f elf$/;"	m
ASSERT	include/stdio.h	11;"	d
ATA_IDENTIFY	include/sys/hd.h	258;"	d
ATA_READ	include/sys/hd.h	259;"	d
ATA_WRITE	include/sys/hd.h	260;"	d
AT_WINI_IRQ	include/sys/const.h	97;"	d
BACKSPACE	include/sys/keyboard.h	37;"	d
BLACK	include/sys/const.h	21;"	d
BLUE	include/sys/const.h	25;"	d
BOTH	include/sys/const.h	119;"	d
BRIGHT	include/sys/const.h	27;"	d
BUF	include/sys/const.h	169;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	0100h	; 调试状态下堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	07c00h	; Boot状态下堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
BaseOfStack	boot/loader.asm	/^BaseOfStack	equ	0100h$/;"	d
BootMessage	boot/boot.asm	/^BootMessage:		db	"Booting  "; 9字节, 不够则用空格补齐. 序号 0$/;"	d
CAPS_LOCK	include/sys/keyboard.h	52;"	d
CASCADE_IRQ	include/sys/const.h	90;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I include\/ -I include\/sys\/ -c -fno-builtin -Wall -g -m32$/;"	m
CLOCK_IRQ	include/sys/const.h	88;"	d
CLOSE	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
CNT	include/sys/const.h	164;"	d
CONSOLE	include/sys/console.h	/^}CONSOLE;$/;"	t	typeref:struct:s_console
CRTC_ADDR_REG	include/sys/const.h	77;"	d
CRTC_DATA_REG	include/sys/const.h	78;"	d
CTRL_L	include/sys/keyboard.h	46;"	d
CTRL_R	include/sys/keyboard.h	47;"	d
CURSOR_H	include/sys/const.h	81;"	d
CURSOR_L	include/sys/const.h	82;"	d
DASM	Makefile	/^DASM		= objdump$/;"	m
DASMFLAGS	Makefile	/^DASMFLAGS	= -D$/;"	m
DASMOUTPUT	Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DA_32	include/sys/protect.h	93;"	d
DA_386CGate	include/sys/protect.h	111;"	d
DA_386IGate	include/sys/protect.h	112;"	d
DA_386TGate	include/sys/protect.h	113;"	d
DA_386TSS	include/sys/protect.h	110;"	d
DA_C	include/sys/protect.h	103;"	d
DA_CCO	include/sys/protect.h	105;"	d
DA_CCOR	include/sys/protect.h	106;"	d
DA_CR	include/sys/protect.h	104;"	d
DA_DPL0	include/sys/protect.h	95;"	d
DA_DPL1	include/sys/protect.h	96;"	d
DA_DPL2	include/sys/protect.h	97;"	d
DA_DPL3	include/sys/protect.h	98;"	d
DA_DR	include/sys/protect.h	100;"	d
DA_DRW	include/sys/protect.h	101;"	d
DA_DRWA	include/sys/protect.h	102;"	d
DA_LDT	include/sys/protect.h	108;"	d
DA_LIMIT_4K	include/sys/protect.h	94;"	d
DA_TaskGate	include/sys/protect.h	109;"	d
DEFAULT_CHAR_COLOR	include/sys/console.h	28;"	d
DELETE	include/sys/keyboard.h	74;"	d
DEVICE	include/sys/const.h	167;"	d
DEV_CDROM	include/sys/const.h	195;"	d
DEV_CHAR_TTY	include/sys/const.h	197;"	d
DEV_CLOSE	include/sys/const.h	/^	DEV_CLOSE,$/;"	e	enum:msgtype
DEV_FLOPPY	include/sys/const.h	194;"	d
DEV_HD	include/sys/const.h	196;"	d
DEV_IOCTL	include/sys/const.h	/^	DEV_IOCTL,$/;"	e	enum:msgtype
DEV_OPEN	include/sys/const.h	/^	DEV_OPEN = 1001,$/;"	e	enum:msgtype
DEV_READ	include/sys/const.h	/^	DEV_READ,$/;"	e	enum:msgtype
DEV_SCSI	include/sys/const.h	198;"	d
DEV_WRITE	include/sys/const.h	/^	DEV_WRITE,$/;"	e	enum:msgtype
DIOCTL_GET_GEO	include/sys/const.h	185;"	d
DIR_ENTRY_SIZE	include/sys/fs.h	119;"	d
DISK_LOG	include/sys/const.h	/^	DISK_LOG$/;"	e	enum:msgtype
DOWN	include/sys/keyboard.h	80;"	d
DRV_OF_DEV	kernel/hd.c	43;"	d	file:
Disassembly	dis-kernel.asm	/^Disassembly of section .text:$/;"	l
DispAL	boot/loader.asm	/^DispAL:$/;"	l
DispInt	boot/loader.asm	/^DispInt:$/;"	l
DispMemInfo	boot/loader.asm	/^DispMemInfo:$/;"	l
DispReturn	boot/loader.asm	/^DispReturn:$/;"	l
DispStr	boot/boot.asm	/^DispStr:$/;"	l
DispStr	boot/loader.asm	/^DispStr:$/;"	l
DispStrRealMode	boot/loader.asm	/^DispStrRealMode:$/;"	l
ENABLE_DISK_LOG	include/sys/config.h	15;"	d
END	include/sys/keyboard.h	76;"	d
ENTER	include/sys/keyboard.h	36;"	d
ENTRYOFFSET	Makefile	/^ENTRYOFFSET	=   0x400$/;"	m
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x1000$/;"	m
ESC	include/sys/keyboard.h	34;"	d
ETHER_IRQ	include/sys/const.h	91;"	d
EXTERN	include/stdio.h	21;"	d
EXTERN	include/sys/global.h	10;"	d
EXTERN	include/sys/global.h	11;"	d
EXT_PART	include/sys/const.h	237;"	d
F1	include/sys/keyboard.h	57;"	d
F10	include/sys/keyboard.h	66;"	d
F11	include/sys/keyboard.h	67;"	d
F12	include/sys/keyboard.h	68;"	d
F2	include/sys/keyboard.h	58;"	d
F3	include/sys/keyboard.h	59;"	d
F4	include/sys/keyboard.h	60;"	d
F5	include/sys/keyboard.h	61;"	d
F6	include/sys/keyboard.h	62;"	d
F7	include/sys/keyboard.h	63;"	d
F8	include/sys/keyboard.h	64;"	d
F9	include/sys/keyboard.h	65;"	d
FD	include/sys/const.h	160;"	d
FIRST_PROC	include/sys/proc.h	82;"	d
FLAGS	include/sys/const.h	162;"	d
FLAG_ALT_L	include/sys/keyboard.h	25;"	d
FLAG_ALT_R	include/sys/keyboard.h	26;"	d
FLAG_BREAK	include/sys/keyboard.h	19;"	d
FLAG_CTRL_L	include/sys/keyboard.h	23;"	d
FLAG_CTRL_R	include/sys/keyboard.h	24;"	d
FLAG_EXT	include/sys/keyboard.h	20;"	d
FLAG_PAD	include/sys/keyboard.h	27;"	d
FLAG_SHIFT_L	include/sys/keyboard.h	21;"	d
FLAG_SHIFT_R	include/sys/keyboard.h	22;"	d
FLASH	include/sys/const.h	26;"	d
FLOPPY_IRQ	include/sys/const.h	95;"	d
FSBUF_SIZE	kernel/global.c	/^PUBLIC	const int	FSBUF_SIZE	= 0x100000;$/;"	v
GDT_SIZE	include/sys/const.h	31;"	d
GET_PID	include/sys/const.h	/^	GET_TICKS, GET_PID,$/;"	e	enum:msgtype
GET_TICKS	include/sys/const.h	/^	GET_TICKS, GET_PID,$/;"	e	enum:msgtype
GLOBAL_VARIABLES_HERE	kernel/global.c	8;"	d	file:
GRAY_CHAR	include/sys/console.h	29;"	d
GREEN	include/sys/const.h	24;"	d
GUI_L	include/sys/keyboard.h	39;"	d
GUI_R	include/sys/keyboard.h	40;"	d
GdtLen	boot/loader.asm	/^GdtLen		equ	$ - LABEL_GDT$/;"	d
GdtPtr	boot/loader.asm	/^GdtPtr		dw	GdtLen - 1				; 段界限$/;"	d
GetFATEntry	boot/boot.asm	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.asm	/^GetFATEntry:$/;"	l
HARD_INT	include/sys/const.h	/^	HARD_INT = 1,$/;"	e	enum:msgtype
HD_TIMEOUT	include/sys/hd.h	256;"	d
HOME	include/sys/keyboard.h	75;"	d
HZ	include/sys/const.h	63;"	d
IDT_SIZE	include/sys/const.h	32;"	d
INDEX_DUMMY	include/sys/protect.h	68;"	d
INDEX_FLAT_C	include/sys/protect.h	69;"	d
INDEX_FLAT_RW	include/sys/protect.h	70;"	d
INDEX_LDT_C	include/sys/protect.h	89;"	d
INDEX_LDT_FIRST	include/sys/protect.h	73;"	d
INDEX_LDT_RW	include/sys/protect.h	90;"	d
INDEX_TSS	include/sys/protect.h	72;"	d
INDEX_VIDEO	include/sys/protect.h	71;"	d
INODE_SIZE	include/sys/fs.h	95;"	d
INSERT	include/sys/keyboard.h	73;"	d
INTERRUPT	include/sys/const.h	102;"	d
INT_M_CTL	include/sys/const.h	51;"	d
INT_M_CTLMASK	include/sys/const.h	52;"	d
INT_S_CTL	include/sys/const.h	53;"	d
INT_S_CTLMASK	include/sys/const.h	54;"	d
INT_VECTOR_BOUNDS	include/sys/protect.h	133;"	d
INT_VECTOR_BREAKPOINT	include/sys/protect.h	131;"	d
INT_VECTOR_COPROC_ERR	include/sys/protect.h	143;"	d
INT_VECTOR_COPROC_NOT	include/sys/protect.h	135;"	d
INT_VECTOR_COPROC_SEG	include/sys/protect.h	137;"	d
INT_VECTOR_DEBUG	include/sys/protect.h	129;"	d
INT_VECTOR_DIVIDE	include/sys/protect.h	128;"	d
INT_VECTOR_DOUBLE_FAULT	include/sys/protect.h	136;"	d
INT_VECTOR_INVAL_OP	include/sys/protect.h	134;"	d
INT_VECTOR_INVAL_TSS	include/sys/protect.h	138;"	d
INT_VECTOR_IRQ0	include/sys/protect.h	146;"	d
INT_VECTOR_IRQ8	include/sys/protect.h	147;"	d
INT_VECTOR_NMI	include/sys/protect.h	130;"	d
INT_VECTOR_OVERFLOW	include/sys/protect.h	132;"	d
INT_VECTOR_PAGE_FAULT	include/sys/protect.h	142;"	d
INT_VECTOR_PROTECTION	include/sys/protect.h	141;"	d
INT_VECTOR_SEG_NOT	include/sys/protect.h	139;"	d
INT_VECTOR_STACK_FAULT	include/sys/protect.h	140;"	d
INT_VECTOR_SYS_CALL	include/sys/protect.h	150;"	d
INT_VECTOR_SYS_CALL	lib/syscall.asm	/^INT_VECTOR_SYS_CALL equ 0x90$/;"	d
INVALID_DRIVER	include/sys/const.h	101;"	d
INVALID_INODE	include/sys/const.h	207;"	d
I_BLOCK_SPECIAL	include/sys/const.h	248;"	d
I_CHAR_SPECIAL	include/sys/const.h	250;"	d
I_DIRECTORY	include/sys/const.h	249;"	d
I_NAMED_PIPE	include/sys/const.h	251;"	d
I_REGULAR	include/sys/const.h	247;"	d
I_TYPE_MASK	include/sys/const.h	246;"	d
InitKernel	boot/loader.asm	/^InitKernel:	; 遍历每一个 Program Header，根据 Program Header 中的信息来确定把什么放进内存，放到什么位置，以及放多少。$/;"	l
KB_ACK	include/sys/const.h	74;"	d
KB_CMD	include/sys/const.h	70;"	d
KB_DATA	include/sys/const.h	67;"	d
KB_IN_BYTES	include/sys/keyboard.h	15;"	d
KEYBOARD_IRQ	include/sys/const.h	89;"	d
KernelFileName	boot/loader.asm	/^KernelFileName		db	"KERNEL  BIN", 0	; KERNEL.BIN 之文件名$/;"	d
KillMotor	boot/loader.asm	/^KillMotor:$/;"	l
LABEL_CMP_FILENAME	boot/boot.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/loader.asm	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.asm	/^LABEL_DESC_FLAT_C:		Descriptor             0,              0fffffh, DA_CR  | DA_32 | DA_LIMIT_4K			; 0 ~ 4G$/;"	l
LABEL_DESC_FLAT_RW	boot/loader.asm	/^LABEL_DESC_FLAT_RW:		Descriptor             0,              0fffffh, DA_DRW | DA_32 | DA_LIMIT_4K			; 0 ~ 4G$/;"	l
LABEL_DESC_VIDEO	boot/loader.asm	/^LABEL_DESC_VIDEO:		Descriptor	 0B8000h,               0ffffh, DA_DRW                         | DA_DPL3	; 显存首地址$/;"	l
LABEL_DIFFERENT	boot/boot.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN_2	boot/boot.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.asm	/^LABEL_FILENAME_FOUND:			; 找到 LOADER.BIN 后便来到这里继续$/;"	l
LABEL_FILENAME_FOUND	boot/loader.asm	/^LABEL_FILENAME_FOUND:			; 找到 KERNEL.BIN 后便来到这里继续$/;"	l
LABEL_FILE_LOADED	boot/boot.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/loader.asm	/^LABEL_GDT:			Descriptor             0,                    0, 0						; 空描述符$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/boot.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/loader.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.asm	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.asm	/^LABEL_GO_ON:$/;"	l
LABEL_NO_KERNELBIN	boot/loader.asm	/^LABEL_NO_KERNELBIN:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.asm	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.asm	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.asm	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.asm	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.asm	/^LABEL_START:	$/;"	l
LABEL_START	boot/loader.asm	/^LABEL_START:			; <--- 从这里开始 *************$/;"	l
LAST_PROC	include/sys/proc.h	83;"	d
LD	Makefile	/^LD		= ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		= -Ttext $(ENTRYPOINT) -Map krnl.map -m elf_i386$/;"	m
LDT_SIZE	include/sys/protect.h	87;"	d
LED_CODE	include/sys/const.h	73;"	d
LEFT	include/sys/keyboard.h	81;"	d
LSEEK	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
LoadMessage	boot/loader.asm	/^LoadMessage:		db	"Loading  "$/;"	d
LoaderFileName	boot/boot.asm	/^LoaderFileName		db	"LOADER  BIN", 0	; LOADER.BIN 之文件名$/;"	d
MAGIC_V1	include/sys/fs.h	25;"	d
MAG_CH_ASSERT	include/sys/const.h	123;"	d
MAG_CH_PANIC	include/sys/const.h	122;"	d
MAJOR	include/sys/const.h	204;"	d
MAJOR_SHIFT	include/sys/const.h	200;"	d
MAKE_COLOR	include/sys/const.h	28;"	d
MAKE_DEV	include/sys/const.h	201;"	d
MAKE_DEVICE_REG	include/sys/hd.h	262;"	d
MAP_COLS	include/sys/keyboard.h	16;"	d
MASK_RAW	include/sys/keyboard.h	29;"	d
MAX_DRIVES	include/sys/const.h	210;"	d
MAX_FILENAME_LEN	include/sys/fs.h	102;"	d
MAX_IO_BYTES	include/sys/hd.h	227;"	d
MAX_PATH	include/stdio.h	33;"	d
MAX_PRIM	include/sys/const.h	222;"	d
MAX_SUBPARTITIONS	include/sys/const.h	224;"	d
MAX_TICKS	include/sys/const.h	111;"	d
MEMSET_LOG_SECTS	include/sys/config.h	17;"	d
MESSAGE	include/type.h	/^} MESSAGE;$/;"	t	typeref:struct:__anon1
MINOR	include/sys/const.h	205;"	d
MINOR_BOOT	include/sys/config.h	10;"	d
MINOR_hd1a	include/sys/const.h	227;"	d
MINOR_hd2a	include/sys/const.h	228;"	d
MemChkBuf	boot/loader.asm	/^MemChkBuf		equ	LOADER_PHY_ADDR + _MemChkBuf$/;"	d
MemCpy	boot/loader.asm	/^MemCpy:$/;"	l
Message1	boot/boot.asm	/^Message1		db	"Ready.   "; 9字节, 不够则用空格补齐. 序号 1$/;"	d
Message1	boot/loader.asm	/^Message1		db	"         "$/;"	d
Message2	boot/boot.asm	/^Message2		db	"No LOADER"; 9字节, 不够则用空格补齐. 序号 2$/;"	d
Message2	boot/loader.asm	/^Message2		db	"Ready.   "$/;"	d
Message3	boot/loader.asm	/^Message3		db	"No KERNEL"$/;"	d
Message4	boot/loader.asm	/^Message4		db	"Too Large"$/;"	d
MessageLength	boot/boot.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/loader.asm	/^MessageLength		equ	9$/;"	d
NAME_LEN	include/sys/const.h	163;"	d
NO_DEV	include/sys/const.h	193;"	d
NO_PART	include/sys/const.h	236;"	d
NO_TASK	include/sys/const.h	109;"	d
NR_CONSOLES	include/sys/const.h	48;"	d
NR_DEFAULT_FILE_SECTS	include/sys/const.h	256;"	d
NR_FILES	include/sys/const.h	239;"	d
NR_FILE_DESC	include/sys/const.h	240;"	d
NR_INODE	include/sys/const.h	241;"	d
NR_IRQ	include/sys/const.h	87;"	d
NR_PART_PER_DRIVE	include/sys/const.h	211;"	d
NR_PRIM_PER_DRIVE	include/sys/const.h	214;"	d
NR_PROCS	include/sys/proc.h	81;"	d
NR_SCAN_CODES	include/sys/keyboard.h	17;"	d
NR_SECTS_FOR_LOG	include/sys/config.h	18;"	d
NR_SUB_PER_DRIVE	include/sys/const.h	213;"	d
NR_SUB_PER_PART	include/sys/const.h	212;"	d
NR_SUPER_BLOCK	include/sys/const.h	242;"	d
NR_SYS_CALL	include/sys/const.h	114;"	d
NR_TASKS	include/sys/proc.h	80;"	d
NUM_LOCK	include/sys/keyboard.h	53;"	d
OBJS	Makefile	/^OBJS		= kernel\/kernel.o lib\/syscall.o kernel\/start.o kernel\/main.o\\$/;"	m
OFFSET	include/sys/const.h	170;"	d
OPEN	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
ORANGESBOOT	Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
ORANGESKERNEL	Makefile	/^ORANGESKERNEL	= kernel.bin$/;"	m
ORANGES_PART	include/sys/const.h	235;"	d
O_CREAT	include/stdio.h	26;"	d
O_RDWR	include/stdio.h	27;"	d
PAD_0	include/sys/keyboard.h	96;"	d
PAD_1	include/sys/keyboard.h	97;"	d
PAD_2	include/sys/keyboard.h	98;"	d
PAD_3	include/sys/keyboard.h	99;"	d
PAD_4	include/sys/keyboard.h	100;"	d
PAD_5	include/sys/keyboard.h	101;"	d
PAD_6	include/sys/keyboard.h	102;"	d
PAD_7	include/sys/keyboard.h	103;"	d
PAD_8	include/sys/keyboard.h	104;"	d
PAD_9	include/sys/keyboard.h	105;"	d
PAD_DEL	include/sys/keyboard.h	116;"	d
PAD_DOT	include/sys/keyboard.h	95;"	d
PAD_DOWN	include/sys/keyboard.h	107;"	d
PAD_END	include/sys/keyboard.h	111;"	d
PAD_ENTER	include/sys/keyboard.h	94;"	d
PAD_HOME	include/sys/keyboard.h	110;"	d
PAD_INS	include/sys/keyboard.h	114;"	d
PAD_LEFT	include/sys/keyboard.h	108;"	d
PAD_MID	include/sys/keyboard.h	115;"	d
PAD_MINUS	include/sys/keyboard.h	92;"	d
PAD_PAGEDOWN	include/sys/keyboard.h	113;"	d
PAD_PAGEUP	include/sys/keyboard.h	112;"	d
PAD_PLUS	include/sys/keyboard.h	93;"	d
PAD_RIGHT	include/sys/keyboard.h	109;"	d
PAD_SLASH	include/sys/keyboard.h	90;"	d
PAD_STAR	include/sys/keyboard.h	91;"	d
PAD_UP	include/sys/keyboard.h	106;"	d
PAGEDOWN	include/sys/keyboard.h	78;"	d
PAGEUP	include/sys/keyboard.h	77;"	d
PARTITION_ENTRY	include/sys/hd.h	/^} PARTITION_ENTRY;$/;"	v	typeref:struct:part_ent
PARTITION_TABLE_OFFSET	include/sys/hd.h	257;"	d
PATHNAME	include/sys/const.h	161;"	d
PAUSEBREAK	include/sys/keyboard.h	72;"	d
PID	include/sys/const.h	173;"	d
POSITION	include/sys/const.h	168;"	d
POWER	include/sys/keyboard.h	85;"	d
PRINTER_IRQ	include/sys/const.h	96;"	d
PRINTSCREEN	include/sys/keyboard.h	71;"	d
PRIVATE	include/type.h	13;"	d
PRIVILEGE_KRNL	include/sys/const.h	35;"	d
PRIVILEGE_TASK	include/sys/const.h	36;"	d
PRIVILEGE_USER	include/sys/const.h	37;"	d
PROC_NR	include/sys/const.h	166;"	d
PUBLIC	include/type.h	12;"	d
P_EXTENDED	include/sys/const.h	233;"	d
P_PRIMARY	include/sys/const.h	232;"	d
RATE_GENERATOR	include/sys/const.h	59;"	d
RD_SECT	include/sys/fs.h	136;"	d
READ	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
RECEIVE	include/sys/const.h	118;"	d
RECEIVING	include/sys/const.h	45;"	d
RED	include/sys/const.h	23;"	d
RED_CHAR	include/sys/console.h	30;"	d
REG_ALT_STATUS	include/sys/hd.h	220;"	d
REG_CMD	include/sys/hd.h	176;"	d
REG_DATA	include/sys/hd.h	108;"	d
REG_DEVICE	include/sys/hd.h	134;"	d
REG_DEV_CTRL	include/sys/hd.h	200;"	d
REG_DRV_ADDR	include/sys/hd.h	225;"	d
REG_ERROR	include/sys/hd.h	110;"	d
REG_FEATURES	include/sys/hd.h	109;"	d
REG_LBA_HIGH	include/sys/hd.h	133;"	d
REG_LBA_LOW	include/sys/hd.h	131;"	d
REG_LBA_MID	include/sys/hd.h	132;"	d
REG_NSECTOR	include/sys/hd.h	130;"	d
REG_STATUS	include/sys/hd.h	151;"	d
REQUEST	include/sys/const.h	165;"	d
RESUME_PROC	include/sys/const.h	/^	SUSPEND_PROC, RESUME_PROC,$/;"	e	enum:msgtype
RETVAL	include/sys/const.h	175;"	d
RIGHT	include/sys/keyboard.h	82;"	d
ROOT_DEV	include/sys/const.h	230;"	d
ROOT_INODE	include/sys/const.h	208;"	d
RPL_KRNL	include/sys/const.h	39;"	d
RPL_TASK	include/sys/const.h	40;"	d
RPL_USER	include/sys/const.h	41;"	d
RS232_IRQ	include/sys/const.h	93;"	d
ReadSector	boot/boot.asm	/^ReadSector:$/;"	l
ReadSector	boot/loader.asm	/^ReadSector:$/;"	l
SA_RPL0	include/sys/protect.h	118;"	d
SA_RPL1	include/sys/protect.h	119;"	d
SA_RPL2	include/sys/protect.h	120;"	d
SA_RPL3	include/sys/protect.h	121;"	d
SA_RPL_MASK	include/sys/protect.h	117;"	d
SA_TIG	include/sys/protect.h	124;"	d
SA_TIL	include/sys/protect.h	125;"	d
SA_TI_MASK	include/sys/protect.h	123;"	d
SCROLL_LOCK	include/sys/keyboard.h	54;"	d
SCR_DN	include/sys/console.h	23;"	d
SCR_SIZE	include/sys/console.h	25;"	d
SCR_UP	include/sys/console.h	22;"	d
SCR_WIDTH	include/sys/console.h	26;"	d
SECONDARY_IRQ	include/sys/const.h	92;"	d
SECTOR_BITS	include/sys/const.h	189;"	d
SECTOR_SIZE	include/sys/const.h	188;"	d
SECTOR_SIZE_SHIFT	include/sys/const.h	190;"	d
SEEK_CUR	include/stdio.h	30;"	d
SEEK_END	include/stdio.h	31;"	d
SEEK_SET	include/stdio.h	29;"	d
SELECTOR_DUMMY	include/sys/protect.h	75;"	d
SELECTOR_FLAT_C	include/sys/protect.h	76;"	d
SELECTOR_FLAT_RW	include/sys/protect.h	77;"	d
SELECTOR_KERNEL_CS	include/sys/protect.h	82;"	d
SELECTOR_KERNEL_DS	include/sys/protect.h	83;"	d
SELECTOR_KERNEL_GS	include/sys/protect.h	84;"	d
SELECTOR_LDT_FIRST	include/sys/protect.h	80;"	d
SELECTOR_TSS	include/sys/protect.h	79;"	d
SELECTOR_VIDEO	include/sys/protect.h	78;"	d
SEND	include/sys/const.h	117;"	d
SENDING	include/sys/const.h	44;"	d
SET_LOG_SECT_SMAP_AT_STARTUP	include/sys/config.h	16;"	d
SHIFT_L	include/sys/keyboard.h	44;"	d
SHIFT_R	include/sys/keyboard.h	45;"	d
SLEEP	include/sys/keyboard.h	86;"	d
STACK_SIZE_FS	include/sys/proc.h	89;"	d
STACK_SIZE_HD	include/sys/proc.h	88;"	d
STACK_SIZE_SYS	include/sys/proc.h	87;"	d
STACK_SIZE_TESTA	include/sys/proc.h	90;"	d
STACK_SIZE_TESTB	include/sys/proc.h	91;"	d
STACK_SIZE_TESTC	include/sys/proc.h	92;"	d
STACK_SIZE_TOTAL	include/sys/proc.h	94;"	d
STACK_SIZE_TTY	include/sys/proc.h	86;"	d
START_ADDR_H	include/sys/const.h	79;"	d
START_ADDR_L	include/sys/const.h	80;"	d
STAT	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
STATUS_BSY	include/sys/hd.h	167;"	d
STATUS_CORR	include/sys/hd.h	172;"	d
STATUS_DFSE	include/sys/hd.h	169;"	d
STATUS_DRDY	include/sys/hd.h	168;"	d
STATUS_DRQ	include/sys/hd.h	171;"	d
STATUS_DSC	include/sys/hd.h	170;"	d
STATUS_ERR	include/sys/hd.h	174;"	d
STATUS_IDX	include/sys/hd.h	173;"	d
STR_DEFAULT_LEN	include/stdio.h	24;"	d
SUPER_BLOCK_SIZE	include/sys/fs.h	62;"	d
SUSPEND_PROC	include/sys/const.h	/^	SUSPEND_PROC, RESUME_PROC,$/;"	e	enum:msgtype
SYSCALL_RET	include/sys/const.h	/^	SYSCALL_RET,$/;"	e	enum:msgtype
SYSLOG	include/stdio.h	40;"	d
SelectorFlatC	boot/loader.asm	/^SelectorFlatC		equ	LABEL_DESC_FLAT_C	- LABEL_GDT$/;"	d
SelectorFlatRW	boot/loader.asm	/^SelectorFlatRW		equ	LABEL_DESC_FLAT_RW	- LABEL_GDT$/;"	d
SelectorVideo	boot/loader.asm	/^SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT + SA_RPL3$/;"	d
SetupPaging	boot/loader.asm	/^SetupPaging:$/;"	l
StackSpace	boot/loader.asm	/^StackSpace:	times	1000h	db	0$/;"	l
StackSpace	kernel/kernel.asm	/^StackSpace		resb	2 * 1024$/;"	l
StackTop	kernel/kernel.asm	/^StackTop:		; 栈顶$/;"	l
TAB	include/sys/keyboard.h	35;"	d
TASK_FS	include/sys/const.h	106;"	d
TASK_HD	include/sys/const.h	105;"	d
TASK_SYS	include/sys/const.h	104;"	d
TASK_TTY	include/sys/const.h	103;"	d
TIMER0	include/sys/const.h	57;"	d
TIMER_FREQ	include/sys/const.h	62;"	d
TIMER_MODE	include/sys/const.h	58;"	d
TTY	include/sys/tty.h	/^}TTY;$/;"	t	typeref:struct:s_tty
TTY_END	kernel/tty.c	54;"	d	file:
TTY_FIRST	kernel/tty.c	53;"	d	file:
TTY_IN_BYTES	include/sys/tty.h	12;"	d
TTY_OUT_BUF_LEN	include/sys/tty.h	13;"	d
TestA	kernel/main.c	/^void TestA()$/;"	f
TestB	kernel/main.c	/^void TestB()$/;"	f
TestC	kernel/main.c	/^void TestC()$/;"	f
TopOfStack	boot/loader.asm	/^TopOfStack	equ	LOADER_PHY_ADDR + $	; 栈顶$/;"	d
UNLINK	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
UP	include/sys/keyboard.h	79;"	d
V_MEM_BASE	include/sys/const.h	83;"	d
V_MEM_SIZE	include/sys/const.h	84;"	d
WAKE	include/sys/keyboard.h	87;"	d
WHENCE	include/sys/const.h	171;"	d
WHITE	include/sys/const.h	22;"	d
WRITE	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK,$/;"	e	enum:msgtype
WR_SECT	include/sys/fs.h	142;"	d
XT_WINI_IRQ	include/sys/const.h	94;"	d
_ARDStruct	boot/loader.asm	/^_ARDStruct:			; Address Range Descriptor Structure$/;"	l
_MemChkBuf	boot/loader.asm	/^_MemChkBuf:	times	256	db	0$/;"	l
_NR_printx	lib/syscall.asm	/^_NR_printx	    equ 0$/;"	d
_NR_sendrec	lib/syscall.asm	/^_NR_sendrec	    equ 1$/;"	d
_ORANGES_CONSOLE_H_	include/sys/console.h	9;"	d
_ORANGES_CONST_H_	include/sys/const.h	9;"	d
_ORANGES_FS_H_	include/sys/fs.h	11;"	d
_ORANGES_HD_H_	include/sys/hd.h	11;"	d
_ORANGES_KEYBOARD_H_	include/sys/keyboard.h	9;"	d
_ORANGES_KEYMAP_H_	include/sys/keymap.h	14;"	d
_ORANGES_PROTECT_H_	include/sys/protect.h	9;"	d
_ORANGES_TTY_H_	include/sys/tty.h	9;"	d
_ORANGES_TYPE_H_	include/type.h	9;"	d
_buf	fs/disklog.c	/^static char _buf[SECTOR_SIZE];$/;"	v	file:
_dwBaseAddrHigh	boot/loader.asm	/^	_dwBaseAddrHigh:	dd	0$/;"	d
_dwBaseAddrLow	boot/loader.asm	/^	_dwBaseAddrLow:		dd	0$/;"	d
_dwDispPos	boot/loader.asm	/^_dwDispPos:			dd	(80 * 7 + 0) * 2	; 屏幕第 7 行, 第 0 列。$/;"	d
_dwLengthHigh	boot/loader.asm	/^	_dwLengthHigh:		dd	0$/;"	d
_dwLengthLow	boot/loader.asm	/^	_dwLengthLow:		dd	0$/;"	d
_dwMCRNumber	boot/loader.asm	/^_dwMCRNumber:			dd	0	; Memory Check Result$/;"	d
_dwMemSize	boot/loader.asm	/^_dwMemSize:			dd	0$/;"	d
_dwType	boot/loader.asm	/^	_dwType:		dd	0$/;"	d
_start	kernel/kernel.asm	/^_start:$/;"	l
_szMemChkTitle	boot/loader.asm	/^_szMemChkTitle:			db	"BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szRAMSize	boot/loader.asm	/^_szRAMSize:			db	"RAM size: ", 0$/;"	d
_szReturn	boot/loader.asm	/^_szReturn:			db	0Ah, 0$/;"	d
_unused	include/sys/fs.h	/^	u8	_unused[16];	\/**< Stuff for alignment *\/$/;"	m	struct:inode
a004	dis-kernel.asm	/^    a004:	e8 61 cc ff ff       	call   6c6a <syslog>$/;"	l
a009	dis-kernel.asm	/^    a009:	83 c4 10             	add    $0x10,%esp$/;"	l
a00c	dis-kernel.asm	/^    a00c:	eb 04                	jmp    a012 <dump_fd_graph+0x740>$/;"	l
a00e	dis-kernel.asm	/^    a00e:	90                   	nop$/;"	l
a00f	dis-kernel.asm	/^    a00f:	eb 01                	jmp    a012 <dump_fd_graph+0x740>$/;"	l
a011	dis-kernel.asm	/^    a011:	90                   	nop$/;"	l
a012	dis-kernel.asm	/^    a012:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)$/;"	l
a016	dis-kernel.asm	/^    a016:	83 7d d8 07          	cmpl   $0x7,-0x28(%ebp)$/;"	l
a01a	dis-kernel.asm	/^    a01a:	0f 8e fb fe ff ff    	jle    9f1b <dump_fd_graph+0x649>$/;"	l
a020	dis-kernel.asm	/^    a020:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)$/;"	l
a024	dis-kernel.asm	/^    a024:	81 7d c4 ff 01 00 00 	cmpl   $0x1ff,-0x3c(%ebp)$/;"	l
a02b	dis-kernel.asm	/^    a02b:	0f 8e de fe ff ff    	jle    9f0f <dump_fd_graph+0x63d>$/;"	l
a031	dis-kernel.asm	/^    a031:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a035	dis-kernel.asm	/^    a035:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a038	dis-kernel.asm	/^    a038:	8b 50 10             	mov    0x10(%eax),%edx$/;"	l
a03b	dis-kernel.asm	/^    a03b:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a03e	dis-kernel.asm	/^    a03e:	39 c2                	cmp    %eax,%edx$/;"	l
a040	dis-kernel.asm	/^    a040:	0f 87 6c fe ff ff    	ja     9eb2 <dump_fd_graph+0x5e0>$/;"	l
a046	dis-kernel.asm	/^    a046:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a049	dis-kernel.asm	/^    a049:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a04c	dis-kernel.asm	/^    a04c:	83 ec 08             	sub    $0x8,%esp$/;"	l
a04f	dis-kernel.asm	/^    a04f:	50                   	push   %eax$/;"	l
a050	dis-kernel.asm	/^    a050:	68 54 c3 00 00       	push   $0xc354$/;"	l
a055	dis-kernel.asm	/^    a055:	e8 10 cc ff ff       	call   6c6a <syslog>$/;"	l
a05a	dis-kernel.asm	/^    a05a:	83 c4 10             	add    $0x10,%esp$/;"	l
a05d	dis-kernel.asm	/^    a05d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a060	dis-kernel.asm	/^    a060:	68 81 c1 00 00       	push   $0xc181$/;"	l
a065	dis-kernel.asm	/^    a065:	e8 00 cc ff ff       	call   6c6a <syslog>$/;"	l
a06a	dis-kernel.asm	/^    a06a:	83 c4 10             	add    $0x10,%esp$/;"	l
a06d	dis-kernel.asm	/^    a06d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a070	dis-kernel.asm	/^    a070:	68 7d c3 00 00       	push   $0xc37d$/;"	l
a075	dis-kernel.asm	/^    a075:	e8 f0 cb ff ff       	call   6c6a <syslog>$/;"	l
a07a	dis-kernel.asm	/^    a07a:	83 c4 10             	add    $0x10,%esp$/;"	l
a07d	dis-kernel.asm	/^    a07d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a080	dis-kernel.asm	/^    a080:	68 fc c2 00 00       	push   $0xc2fc$/;"	l
a085	dis-kernel.asm	/^    a085:	e8 e0 cb ff ff       	call   6c6a <syslog>$/;"	l
a08a	dis-kernel.asm	/^    a08a:	83 c4 10             	add    $0x10,%esp$/;"	l
a08d	dis-kernel.asm	/^    a08d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a090	dis-kernel.asm	/^    a090:	68 0e c3 00 00       	push   $0xc30e$/;"	l
a095	dis-kernel.asm	/^    a095:	e8 d0 cb ff ff       	call   6c6a <syslog>$/;"	l
a09a	dis-kernel.asm	/^    a09a:	83 c4 10             	add    $0x10,%esp$/;"	l
a09d	dis-kernel.asm	/^    a09d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0a0	dis-kernel.asm	/^    a0a0:	68 95 c3 00 00       	push   $0xc395$/;"	l
a0a5	dis-kernel.asm	/^    a0a5:	e8 c0 cb ff ff       	call   6c6a <syslog>$/;"	l
a0aa	dis-kernel.asm	/^    a0aa:	83 c4 10             	add    $0x10,%esp$/;"	l
a0ad	dis-kernel.asm	/^    a0ad:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0b0	dis-kernel.asm	/^    a0b0:	68 a1 c3 00 00       	push   $0xc3a1$/;"	l
a0b5	dis-kernel.asm	/^    a0b5:	e8 b0 cb ff ff       	call   6c6a <syslog>$/;"	l
a0ba	dis-kernel.asm	/^    a0ba:	83 c4 10             	add    $0x10,%esp$/;"	l
a0bd	dis-kernel.asm	/^    a0bd:	c7 45 a0 02 00 00 00 	movl   $0x2,-0x60(%ebp)$/;"	l
a0c4	dis-kernel.asm	/^    a0c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a0cb	dis-kernel.asm	/^    a0cb:	e9 cb 00 00 00       	jmp    a19b <dump_fd_graph+0x8c9>$/;"	l
a0d0	dis-kernel.asm	/^    a0d0:	8b 1d 9c f7 00 00    	mov    0xf79c,%ebx$/;"	l
a0d6	dis-kernel.asm	/^    a0d6:	8b 55 a0             	mov    -0x60(%ebp),%edx$/;"	l
a0d9	dis-kernel.asm	/^    a0d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a0dc	dis-kernel.asm	/^    a0dc:	01 d0                	add    %edx,%eax$/;"	l
a0de	dis-kernel.asm	/^    a0de:	c1 e0 09             	shl    $0x9,%eax$/;"	l
a0e1	dis-kernel.asm	/^    a0e1:	99                   	cltd   $/;"	l
a0e2	dis-kernel.asm	/^    a0e2:	8b 0d 20 a8 04 00    	mov    0x4a820,%ecx$/;"	l
a0e8	dis-kernel.asm	/^    a0e8:	8b 49 20             	mov    0x20(%ecx),%ecx$/;"	l
a0eb	dis-kernel.asm	/^    a0eb:	83 ec 04             	sub    $0x4,%esp$/;"	l
a0ee	dis-kernel.asm	/^    a0ee:	53                   	push   %ebx$/;"	l
a0ef	dis-kernel.asm	/^    a0ef:	6a 03                	push   $0x3$/;"	l
a0f1	dis-kernel.asm	/^    a0f1:	68 00 02 00 00       	push   $0x200$/;"	l
a0f6	dis-kernel.asm	/^    a0f6:	52                   	push   %edx$/;"	l
a0f7	dis-kernel.asm	/^    a0f7:	50                   	push   %eax$/;"	l
a0f8	dis-kernel.asm	/^    a0f8:	51                   	push   %ecx$/;"	l
a0f9	dis-kernel.asm	/^    a0f9:	68 eb 03 00 00       	push   $0x3eb$/;"	l
a0fe	dis-kernel.asm	/^    a0fe:	e8 59 d4 ff ff       	call   755c <rw_sector>$/;"	l
a103	dis-kernel.asm	/^    a103:	83 c4 20             	add    $0x20,%esp$/;"	l
a106	dis-kernel.asm	/^    a106:	a1 9c f7 00 00       	mov    0xf79c,%eax$/;"	l
a10b	dis-kernel.asm	/^    a10b:	83 ec 04             	sub    $0x4,%esp$/;"	l
a10e	dis-kernel.asm	/^    a10e:	68 00 02 00 00       	push   $0x200$/;"	l
a113	dis-kernel.asm	/^    a113:	50                   	push   %eax$/;"	l
a114	dis-kernel.asm	/^    a114:	68 60 06 01 00       	push   $0x10660$/;"	l
a119	dis-kernel.asm	/^    a119:	e8 c2 c7 ff ff       	call   68e0 <memcpy>$/;"	l
a11e	dis-kernel.asm	/^    a11e:	83 c4 10             	add    $0x10,%esp$/;"	l
a121	dis-kernel.asm	/^    a121:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)$/;"	l
a128	dis-kernel.asm	/^    a128:	eb 64                	jmp    a18e <dump_fd_graph+0x8bc>$/;"	l
a12a	dis-kernel.asm	/^    a12a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)$/;"	l
a131	dis-kernel.asm	/^    a131:	eb 51                	jmp    a184 <dump_fd_graph+0x8b2>$/;"	l
a133	dis-kernel.asm	/^    a133:	8b 45 c4             	mov    -0x3c(%ebp),%eax$/;"	l
a136	dis-kernel.asm	/^    a136:	05 60 06 01 00       	add    $0x10660,%eax$/;"	l
a13b	dis-kernel.asm	/^    a13b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a13e	dis-kernel.asm	/^    a13e:	0f be d0             	movsbl %al,%edx$/;"	l
a141	dis-kernel.asm	/^    a141:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
a144	dis-kernel.asm	/^    a144:	89 c1                	mov    %eax,%ecx$/;"	l
a146	dis-kernel.asm	/^    a146:	d3 fa                	sar    %cl,%edx$/;"	d
a148	dis-kernel.asm	/^    a148:	89 d0                	mov    %edx,%eax$/;"	l
a14a	dis-kernel.asm	/^    a14a:	83 e0 01             	and    $0x1,%eax$/;"	l
a14d	dis-kernel.asm	/^    a14d:	85 c0                	test   %eax,%eax$/;"	l
a14f	dis-kernel.asm	/^    a14f:	74 2f                	je     a180 <dump_fd_graph+0x8ae>$/;"	l
a151	dis-kernel.asm	/^    a151:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a154	dis-kernel.asm	/^    a154:	c1 e0 09             	shl    $0x9,%eax$/;"	l
a157	dis-kernel.asm	/^    a157:	89 c2                	mov    %eax,%edx$/;"	l
a159	dis-kernel.asm	/^    a159:	8b 45 c4             	mov    -0x3c(%ebp),%eax$/;"	l
a15c	dis-kernel.asm	/^    a15c:	01 d0                	add    %edx,%eax$/;"	l
a15e	dis-kernel.asm	/^    a15e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
a165	dis-kernel.asm	/^    a165:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
a168	dis-kernel.asm	/^    a168:	01 d0                	add    %edx,%eax$/;"	l
a16a	dis-kernel.asm	/^    a16a:	89 45 9c             	mov    %eax,-0x64(%ebp)$/;"	l
a16d	dis-kernel.asm	/^    a16d:	83 ec 08             	sub    $0x8,%esp$/;"	l
a170	dis-kernel.asm	/^    a170:	ff 75 9c             	pushl  -0x64(%ebp)$/;"	l
a173	dis-kernel.asm	/^    a173:	68 b6 c3 00 00       	push   $0xc3b6$/;"	l
a178	dis-kernel.asm	/^    a178:	e8 ed ca ff ff       	call   6c6a <syslog>$/;"	l
a17d	dis-kernel.asm	/^    a17d:	83 c4 10             	add    $0x10,%esp$/;"	l
a180	dis-kernel.asm	/^    a180:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)$/;"	l
a184	dis-kernel.asm	/^    a184:	83 7d d8 07          	cmpl   $0x7,-0x28(%ebp)$/;"	l
a188	dis-kernel.asm	/^    a188:	7e a9                	jle    a133 <dump_fd_graph+0x861>$/;"	l
a18a	dis-kernel.asm	/^    a18a:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)$/;"	l
a18e	dis-kernel.asm	/^    a18e:	81 7d c4 ff 01 00 00 	cmpl   $0x1ff,-0x3c(%ebp)$/;"	l
a195	dis-kernel.asm	/^    a195:	7e 93                	jle    a12a <dump_fd_graph+0x858>$/;"	l
a197	dis-kernel.asm	/^    a197:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a19b	dis-kernel.asm	/^    a19b:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a19e	dis-kernel.asm	/^    a19e:	8b 50 0c             	mov    0xc(%eax),%edx$/;"	l
a1a1	dis-kernel.asm	/^    a1a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a1a4	dis-kernel.asm	/^    a1a4:	39 c2                	cmp    %eax,%edx$/;"	l
a1a6	dis-kernel.asm	/^    a1a6:	0f 87 24 ff ff ff    	ja     a0d0 <dump_fd_graph+0x7fe>$/;"	l
a1ac	dis-kernel.asm	/^    a1ac:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1af	dis-kernel.asm	/^    a1af:	68 4e c1 00 00       	push   $0xc14e$/;"	l
a1b4	dis-kernel.asm	/^    a1b4:	e8 b1 ca ff ff       	call   6c6a <syslog>$/;"	l
a1b9	dis-kernel.asm	/^    a1b9:	83 c4 10             	add    $0x10,%esp$/;"	l
a1bc	dis-kernel.asm	/^    a1bc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1bf	dis-kernel.asm	/^    a1bf:	68 52 c1 00 00       	push   $0xc152$/;"	l
a1c4	dis-kernel.asm	/^    a1c4:	e8 a1 ca ff ff       	call   6c6a <syslog>$/;"	l
a1c9	dis-kernel.asm	/^    a1c9:	83 c4 10             	add    $0x10,%esp$/;"	l
a1cc	dis-kernel.asm	/^    a1cc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1cf	dis-kernel.asm	/^    a1cf:	68 67 c1 00 00       	push   $0xc167$/;"	l
a1d4	dis-kernel.asm	/^    a1d4:	e8 91 ca ff ff       	call   6c6a <syslog>$/;"	l
a1d9	dis-kernel.asm	/^    a1d9:	83 c4 10             	add    $0x10,%esp$/;"	l
a1dc	dis-kernel.asm	/^    a1dc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1df	dis-kernel.asm	/^    a1df:	68 bd c3 00 00       	push   $0xc3bd$/;"	l
a1e4	dis-kernel.asm	/^    a1e4:	e8 81 ca ff ff       	call   6c6a <syslog>$/;"	l
a1e9	dis-kernel.asm	/^    a1e9:	83 c4 10             	add    $0x10,%esp$/;"	l
a1ec	dis-kernel.asm	/^    a1ec:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1ef	dis-kernel.asm	/^    a1ef:	68 81 c1 00 00       	push   $0xc181$/;"	l
a1f4	dis-kernel.asm	/^    a1f4:	e8 71 ca ff ff       	call   6c6a <syslog>$/;"	l
a1f9	dis-kernel.asm	/^    a1f9:	83 c4 10             	add    $0x10,%esp$/;"	l
a1fc	dis-kernel.asm	/^    a1fc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1ff	dis-kernel.asm	/^    a1ff:	68 d5 c3 00 00       	push   $0xc3d5$/;"	l
a204	dis-kernel.asm	/^    a204:	e8 61 ca ff ff       	call   6c6a <syslog>$/;"	l
a209	dis-kernel.asm	/^    a209:	83 c4 10             	add    $0x10,%esp$/;"	l
a20c	dis-kernel.asm	/^    a20c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a20f	dis-kernel.asm	/^    a20f:	68 fc c2 00 00       	push   $0xc2fc$/;"	l
a214	dis-kernel.asm	/^    a214:	e8 51 ca ff ff       	call   6c6a <syslog>$/;"	l
a219	dis-kernel.asm	/^    a219:	83 c4 10             	add    $0x10,%esp$/;"	l
a21c	dis-kernel.asm	/^    a21c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a21f	dis-kernel.asm	/^    a21f:	68 0e c3 00 00       	push   $0xc30e$/;"	l
a224	dis-kernel.asm	/^    a224:	e8 41 ca ff ff       	call   6c6a <syslog>$/;"	l
a229	dis-kernel.asm	/^    a229:	83 c4 10             	add    $0x10,%esp$/;"	l
a22c	dis-kernel.asm	/^    a22c:	a1 20 a8 04 00       	mov    0x4a820,%eax$/;"	l
a231	dis-kernel.asm	/^    a231:	8b 40 20             	mov    0x20(%eax),%eax$/;"	l
a234	dis-kernel.asm	/^    a234:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a237	dis-kernel.asm	/^    a237:	50                   	push   %eax$/;"	l
a238	dis-kernel.asm	/^    a238:	e8 27 d5 ff ff       	call   7764 <get_super_block>$/;"	l
a23d	dis-kernel.asm	/^    a23d:	83 c4 10             	add    $0x10,%esp$/;"	l
a240	dis-kernel.asm	/^    a240:	89 45 ac             	mov    %eax,-0x54(%ebp)$/;"	l
a243	dis-kernel.asm	/^    a243:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a246	dis-kernel.asm	/^    a246:	8b 50 0c             	mov    0xc(%eax),%edx$/;"	l
a249	dis-kernel.asm	/^    a249:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a24c	dis-kernel.asm	/^    a24c:	8b 40 10             	mov    0x10(%eax),%eax$/;"	l
a24f	dis-kernel.asm	/^    a24f:	01 d0                	add    %edx,%eax$/;"	l
a251	dis-kernel.asm	/^    a251:	83 c0 02             	add    $0x2,%eax$/;"	l
a254	dis-kernel.asm	/^    a254:	89 45 98             	mov    %eax,-0x68(%ebp)$/;"	l
a257	dis-kernel.asm	/^    a257:	8b 1d 9c f7 00 00    	mov    0xf79c,%ebx$/;"	l
a25d	dis-kernel.asm	/^    a25d:	8b 45 98             	mov    -0x68(%ebp),%eax$/;"	l
a260	dis-kernel.asm	/^    a260:	c1 e0 09             	shl    $0x9,%eax$/;"	l
a263	dis-kernel.asm	/^    a263:	99                   	cltd   $/;"	l
a264	dis-kernel.asm	/^    a264:	8b 0d 20 a8 04 00    	mov    0x4a820,%ecx$/;"	l
a26a	dis-kernel.asm	/^    a26a:	8b 49 20             	mov    0x20(%ecx),%ecx$/;"	l
a26d	dis-kernel.asm	/^    a26d:	83 ec 04             	sub    $0x4,%esp$/;"	l
a270	dis-kernel.asm	/^    a270:	53                   	push   %ebx$/;"	l
a271	dis-kernel.asm	/^    a271:	6a 03                	push   $0x3$/;"	l
a273	dis-kernel.asm	/^    a273:	68 00 02 00 00       	push   $0x200$/;"	l
a278	dis-kernel.asm	/^    a278:	52                   	push   %edx$/;"	l
a279	dis-kernel.asm	/^    a279:	50                   	push   %eax$/;"	l
a27a	dis-kernel.asm	/^    a27a:	51                   	push   %ecx$/;"	l
a27b	dis-kernel.asm	/^    a27b:	68 eb 03 00 00       	push   $0x3eb$/;"	l
a280	dis-kernel.asm	/^    a280:	e8 d7 d2 ff ff       	call   755c <rw_sector>$/;"	l
a285	dis-kernel.asm	/^    a285:	83 c4 20             	add    $0x20,%esp$/;"	l
a288	dis-kernel.asm	/^    a288:	a1 9c f7 00 00       	mov    0xf79c,%eax$/;"	l
a28d	dis-kernel.asm	/^    a28d:	83 ec 04             	sub    $0x4,%esp$/;"	l
a290	dis-kernel.asm	/^    a290:	68 00 02 00 00       	push   $0x200$/;"	l
a295	dis-kernel.asm	/^    a295:	50                   	push   %eax$/;"	l
a296	dis-kernel.asm	/^    a296:	68 60 06 01 00       	push   $0x10660$/;"	l
a29b	dis-kernel.asm	/^    a29b:	e8 40 c6 ff ff       	call   68e0 <memcpy>$/;"	l
a2a0	dis-kernel.asm	/^    a2a0:	83 c4 10             	add    $0x10,%esp$/;"	l
a2a3	dis-kernel.asm	/^    a2a3:	c7 45 c0 60 06 01 00 	movl   $0x10660,-0x40(%ebp)$/;"	l
a2aa	dis-kernel.asm	/^    a2aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a2b1	dis-kernel.asm	/^    a2b1:	e9 7e 01 00 00       	jmp    a434 <dump_fd_graph+0xb62>$/;"	l
a2b6	dis-kernel.asm	/^    a2b6:	8b 45 c0             	mov    -0x40(%ebp),%eax$/;"	l
a2b9	dis-kernel.asm	/^    a2b9:	89 45 94             	mov    %eax,-0x6c(%ebp)$/;"	l
a2bc	dis-kernel.asm	/^    a2bc:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a2bf	dis-kernel.asm	/^    a2bf:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a2c2	dis-kernel.asm	/^    a2c2:	85 c0                	test   %eax,%eax$/;"	l
a2c4	dis-kernel.asm	/^    a2c4:	0f 84 61 01 00 00    	je     a42b <dump_fd_graph+0xb59>$/;"	l
a2ca	dis-kernel.asm	/^    a2ca:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a2cd	dis-kernel.asm	/^    a2cd:	8b 00                	mov    (%eax),%eax$/;"	l
a2cf	dis-kernel.asm	/^    a2cf:	3d 00 20 00 00       	cmp    $0x2000,%eax$/;"	l
a2d4	dis-kernel.asm	/^    a2d4:	0f 84 c5 00 00 00    	je     a39f <dump_fd_graph+0xacd>$/;"	l
a2da	dis-kernel.asm	/^    a2da:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a2dd	dis-kernel.asm	/^    a2dd:	8b 50 08             	mov    0x8(%eax),%edx$/;"	l
a2e0	dis-kernel.asm	/^    a2e0:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a2e3	dis-kernel.asm	/^    a2e3:	8b 40 14             	mov    0x14(%eax),%eax$/;"	l
a2e6	dis-kernel.asm	/^    a2e6:	39 c2                	cmp    %eax,%edx$/;"	l
a2e8	dis-kernel.asm	/^    a2e8:	73 1e                	jae    a308 <dump_fd_graph+0xa36>$/;"	l
a2ea	dis-kernel.asm	/^    a2ea:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a2ed	dis-kernel.asm	/^    a2ed:	8b 50 14             	mov    0x14(%eax),%edx$/;"	l
a2f0	dis-kernel.asm	/^    a2f0:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a2f3	dis-kernel.asm	/^    a2f3:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a2f6	dis-kernel.asm	/^    a2f6:	83 ec 04             	sub    $0x4,%esp$/;"	l
a2f9	dis-kernel.asm	/^    a2f9:	52                   	push   %edx$/;"	l
a2fa	dis-kernel.asm	/^    a2fa:	50                   	push   %eax$/;"	l
a2fb	dis-kernel.asm	/^    a2fb:	68 ed c3 00 00       	push   $0xc3ed$/;"	l
a300	dis-kernel.asm	/^    a300:	e8 c2 78 ff ff       	call   1bc7 <panic>$/;"	l
a305	dis-kernel.asm	/^    a305:	83 c4 10             	add    $0x10,%esp$/;"	l
a308	dis-kernel.asm	/^    a308:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a30b	dis-kernel.asm	/^    a30b:	8b 50 08             	mov    0x8(%eax),%edx$/;"	l
a30e	dis-kernel.asm	/^    a30e:	8b 45 ac             	mov    -0x54(%ebp),%eax$/;"	l
a311	dis-kernel.asm	/^    a311:	8b 40 14             	mov    0x14(%eax),%eax$/;"	l
a314	dis-kernel.asm	/^    a314:	29 c2                	sub    %eax,%edx$/;"	l
a316	dis-kernel.asm	/^    a316:	89 d0                	mov    %edx,%eax$/;"	l
a318	dis-kernel.asm	/^    a318:	83 c0 01             	add    $0x1,%eax$/;"	l
a31b	dis-kernel.asm	/^    a31b:	89 45 90             	mov    %eax,-0x70(%ebp)$/;"	l
a31e	dis-kernel.asm	/^    a31e:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a321	dis-kernel.asm	/^    a321:	8b 50 0c             	mov    0xc(%eax),%edx$/;"	l
a324	dis-kernel.asm	/^    a324:	8b 45 90             	mov    -0x70(%ebp),%eax$/;"	l
a327	dis-kernel.asm	/^    a327:	01 d0                	add    %edx,%eax$/;"	l
a329	dis-kernel.asm	/^    a329:	83 e8 01             	sub    $0x1,%eax$/;"	l
a32c	dis-kernel.asm	/^    a32c:	89 45 8c             	mov    %eax,-0x74(%ebp)$/;"	l
a32f	dis-kernel.asm	/^    a32f:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a332	dis-kernel.asm	/^    a332:	83 c0 01             	add    $0x1,%eax$/;"	l
a335	dis-kernel.asm	/^    a335:	83 ec 08             	sub    $0x8,%esp$/;"	l
a338	dis-kernel.asm	/^    a338:	50                   	push   %eax$/;"	l
a339	dis-kernel.asm	/^    a339:	68 09 c4 00 00       	push   $0xc409$/;"	l
a33e	dis-kernel.asm	/^    a33e:	e8 27 c9 ff ff       	call   6c6a <syslog>$/;"	l
a343	dis-kernel.asm	/^    a343:	83 c4 10             	add    $0x10,%esp$/;"	l
a346	dis-kernel.asm	/^    a346:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a349	dis-kernel.asm	/^    a349:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a34c	dis-kernel.asm	/^    a34c:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
a34f	dis-kernel.asm	/^    a34f:	83 c2 01             	add    $0x1,%edx$/;"	l
a352	dis-kernel.asm	/^    a352:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a355	dis-kernel.asm	/^    a355:	ff 75 8c             	pushl  -0x74(%ebp)$/;"	l
a358	dis-kernel.asm	/^    a358:	ff 75 90             	pushl  -0x70(%ebp)$/;"	l
a35b	dis-kernel.asm	/^    a35b:	50                   	push   %eax$/;"	l
a35c	dis-kernel.asm	/^    a35c:	52                   	push   %edx$/;"	l
a35d	dis-kernel.asm	/^    a35d:	68 20 c4 00 00       	push   $0xc420$/;"	l
a362	dis-kernel.asm	/^    a362:	e8 03 c9 ff ff       	call   6c6a <syslog>$/;"	l
a367	dis-kernel.asm	/^    a367:	83 c4 20             	add    $0x20,%esp$/;"	l
a36a	dis-kernel.asm	/^    a36a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a36d	dis-kernel.asm	/^    a36d:	68 4e c1 00 00       	push   $0xc14e$/;"	l
a372	dis-kernel.asm	/^    a372:	e8 f3 c8 ff ff       	call   6c6a <syslog>$/;"	l
a377	dis-kernel.asm	/^    a377:	83 c4 10             	add    $0x10,%esp$/;"	l
a37a	dis-kernel.asm	/^    a37a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a37d	dis-kernel.asm	/^    a37d:	68 52 c1 00 00       	push   $0xc152$/;"	l
a382	dis-kernel.asm	/^    a382:	e8 e3 c8 ff ff       	call   6c6a <syslog>$/;"	l
a387	dis-kernel.asm	/^    a387:	83 c4 10             	add    $0x10,%esp$/;"	l
a38a	dis-kernel.asm	/^    a38a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a38d	dis-kernel.asm	/^    a38d:	68 67 c1 00 00       	push   $0xc167$/;"	l
a392	dis-kernel.asm	/^    a392:	e8 d3 c8 ff ff       	call   6c6a <syslog>$/;"	l
a397	dis-kernel.asm	/^    a397:	83 c4 10             	add    $0x10,%esp$/;"	l
a39a	dis-kernel.asm	/^    a39a:	e9 8d 00 00 00       	jmp    a42c <dump_fd_graph+0xb5a>$/;"	l
a39f	dis-kernel.asm	/^    a39f:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a3a2	dis-kernel.asm	/^    a3a2:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a3a5	dis-kernel.asm	/^    a3a5:	c1 e8 08             	shr    $0x8,%eax$/;"	l
a3a8	dis-kernel.asm	/^    a3a8:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a3ad	dis-kernel.asm	/^    a3ad:	89 45 90             	mov    %eax,-0x70(%ebp)$/;"	l
a3b0	dis-kernel.asm	/^    a3b0:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a3b3	dis-kernel.asm	/^    a3b3:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a3b6	dis-kernel.asm	/^    a3b6:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a3bb	dis-kernel.asm	/^    a3bb:	89 45 8c             	mov    %eax,-0x74(%ebp)$/;"	l
a3be	dis-kernel.asm	/^    a3be:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a3c1	dis-kernel.asm	/^    a3c1:	83 c0 01             	add    $0x1,%eax$/;"	l
a3c4	dis-kernel.asm	/^    a3c4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a3c7	dis-kernel.asm	/^    a3c7:	50                   	push   %eax$/;"	l
a3c8	dis-kernel.asm	/^    a3c8:	68 09 c4 00 00       	push   $0xc409$/;"	l
a3cd	dis-kernel.asm	/^    a3cd:	e8 98 c8 ff ff       	call   6c6a <syslog>$/;"	l
a3d2	dis-kernel.asm	/^    a3d2:	83 c4 10             	add    $0x10,%esp$/;"	l
a3d5	dis-kernel.asm	/^    a3d5:	8b 45 94             	mov    -0x6c(%ebp),%eax$/;"	l
a3d8	dis-kernel.asm	/^    a3d8:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a3db	dis-kernel.asm	/^    a3db:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
a3de	dis-kernel.asm	/^    a3de:	83 c2 01             	add    $0x1,%edx$/;"	l
a3e1	dis-kernel.asm	/^    a3e1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a3e4	dis-kernel.asm	/^    a3e4:	ff 75 8c             	pushl  -0x74(%ebp)$/;"	l
a3e7	dis-kernel.asm	/^    a3e7:	ff 75 90             	pushl  -0x70(%ebp)$/;"	l
a3ea	dis-kernel.asm	/^    a3ea:	50                   	push   %eax$/;"	l
a3eb	dis-kernel.asm	/^    a3eb:	52                   	push   %edx$/;"	l
a3ec	dis-kernel.asm	/^    a3ec:	68 58 c4 00 00       	push   $0xc458$/;"	l
a3f1	dis-kernel.asm	/^    a3f1:	e8 74 c8 ff ff       	call   6c6a <syslog>$/;"	l
a3f6	dis-kernel.asm	/^    a3f6:	83 c4 20             	add    $0x20,%esp$/;"	l
a3f9	dis-kernel.asm	/^    a3f9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a3fc	dis-kernel.asm	/^    a3fc:	68 4e c1 00 00       	push   $0xc14e$/;"	l
a401	dis-kernel.asm	/^    a401:	e8 64 c8 ff ff       	call   6c6a <syslog>$/;"	l
a406	dis-kernel.asm	/^    a406:	83 c4 10             	add    $0x10,%esp$/;"	l
a409	dis-kernel.asm	/^    a409:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a40c	dis-kernel.asm	/^    a40c:	68 52 c1 00 00       	push   $0xc152$/;"	l
a411	dis-kernel.asm	/^    a411:	e8 54 c8 ff ff       	call   6c6a <syslog>$/;"	l
a416	dis-kernel.asm	/^    a416:	83 c4 10             	add    $0x10,%esp$/;"	l
a419	dis-kernel.asm	/^    a419:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a41c	dis-kernel.asm	/^    a41c:	68 67 c1 00 00       	push   $0xc167$/;"	l
a421	dis-kernel.asm	/^    a421:	e8 44 c8 ff ff       	call   6c6a <syslog>$/;"	l
a426	dis-kernel.asm	/^    a426:	83 c4 10             	add    $0x10,%esp$/;"	l
a429	dis-kernel.asm	/^    a429:	eb 01                	jmp    a42c <dump_fd_graph+0xb5a>$/;"	l
a42b	dis-kernel.asm	/^    a42b:	90                   	nop$/;"	l
a42c	dis-kernel.asm	/^    a42c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a430	dis-kernel.asm	/^    a430:	83 45 c0 20          	addl   $0x20,-0x40(%ebp)$/;"	l
a434	dis-kernel.asm	/^    a434:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a437	dis-kernel.asm	/^    a437:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
a43a	dis-kernel.asm	/^    a43a:	0f 86 76 fe ff ff    	jbe    a2b6 <dump_fd_graph+0x9e4>$/;"	l
a440	dis-kernel.asm	/^    a440:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a443	dis-kernel.asm	/^    a443:	68 94 c4 00 00       	push   $0xc494$/;"	l
a448	dis-kernel.asm	/^    a448:	e8 1d c8 ff ff       	call   6c6a <syslog>$/;"	l
a44d	dis-kernel.asm	/^    a44d:	83 c4 10             	add    $0x10,%esp$/;"	l
a450	dis-kernel.asm	/^    a450:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a453	dis-kernel.asm	/^    a453:	68 81 c1 00 00       	push   $0xc181$/;"	l
a458	dis-kernel.asm	/^    a458:	e8 0d c8 ff ff       	call   6c6a <syslog>$/;"	l
a45d	dis-kernel.asm	/^    a45d:	83 c4 10             	add    $0x10,%esp$/;"	l
a460	dis-kernel.asm	/^    a460:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a463	dis-kernel.asm	/^    a463:	68 ae c4 00 00       	push   $0xc4ae$/;"	l
a468	dis-kernel.asm	/^    a468:	e8 fd c7 ff ff       	call   6c6a <syslog>$/;"	l
a46d	dis-kernel.asm	/^    a46d:	83 c4 10             	add    $0x10,%esp$/;"	l
a470	dis-kernel.asm	/^    a470:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a473	dis-kernel.asm	/^    a473:	68 fc c2 00 00       	push   $0xc2fc$/;"	l
a478	dis-kernel.asm	/^    a478:	e8 ed c7 ff ff       	call   6c6a <syslog>$/;"	l
a47d	dis-kernel.asm	/^    a47d:	83 c4 10             	add    $0x10,%esp$/;"	l
a480	dis-kernel.asm	/^    a480:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a483	dis-kernel.asm	/^    a483:	68 0e c3 00 00       	push   $0xc30e$/;"	l
a488	dis-kernel.asm	/^    a488:	e8 dd c7 ff ff       	call   6c6a <syslog>$/;"	l
a48d	dis-kernel.asm	/^    a48d:	83 c4 10             	add    $0x10,%esp$/;"	l
a490	dis-kernel.asm	/^    a490:	a1 20 a8 04 00       	mov    0x4a820,%eax$/;"	l
a495	dis-kernel.asm	/^    a495:	8b 40 20             	mov    0x20(%eax),%eax$/;"	l
a498	dis-kernel.asm	/^    a498:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a49b	dis-kernel.asm	/^    a49b:	50                   	push   %eax$/;"	l
a49c	dis-kernel.asm	/^    a49c:	e8 c3 d2 ff ff       	call   7764 <get_super_block>$/;"	l
a4a1	dis-kernel.asm	/^    a4a1:	83 c4 10             	add    $0x10,%esp$/;"	l
a4a4	dis-kernel.asm	/^    a4a4:	89 45 ac             	mov    %eax,-0x54(%ebp)$/;"	l
a4a7	dis-kernel.asm	/^    a4a7:	a1 20 a8 04 00       	mov    0x4a820,%eax$/;"	l
a4ac	dis-kernel.asm	/^    a4ac:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a4af	dis-kernel.asm	/^    a4af:	89 45 88             	mov    %eax,-0x78(%ebp)$/;"	l
a4b2	dis-kernel.asm	/^    a4b2:	a1 20 a8 04 00       	mov    0x4a820,%eax$/;"	l
a4b7	dis-kernel.asm	/^    a4b7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a4ba	dis-kernel.asm	/^    a4ba:	05 ff 01 00 00       	add    $0x1ff,%eax$/;"	l
a4bf	dis-kernel.asm	/^    a4bf:	c1 e8 09             	shr    $0x9,%eax$/;"	l
a4c2	dis-kernel.asm	/^    a4c2:	89 45 84             	mov    %eax,-0x7c(%ebp)$/;"	l
a4c5	dis-kernel.asm	/^    a4c5:	a1 20 a8 04 00       	mov    0x4a820,%eax$/;"	l
a4ca	dis-kernel.asm	/^    a4ca:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a4cd	dis-kernel.asm	/^    a4cd:	c1 e8 04             	shr    $0x4,%eax$/;"	l
a4d0	dis-kernel.asm	/^    a4d0:	89 45 80             	mov    %eax,-0x80(%ebp)$/;"	l
a4d3	dis-kernel.asm	/^    a4d3:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)$/;"	l
a4da	dis-kernel.asm	/^    a4da:	00 00 00 $/;"	l
a4dd	dis-kernel.asm	/^    a4dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a4e4	dis-kernel.asm	/^    a4e4:	e9 40 01 00 00       	jmp    a629 <dump_fd_graph+0xd57>$/;"	l
a4e9	dis-kernel.asm	/^    a4e9:	8b 1d 9c f7 00 00    	mov    0xf79c,%ebx$/;"	l
a4ef	dis-kernel.asm	/^    a4ef:	8b 55 88             	mov    -0x78(%ebp),%edx$/;"	l
a4f2	dis-kernel.asm	/^    a4f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a4f5	dis-kernel.asm	/^    a4f5:	01 d0                	add    %edx,%eax$/;"	l
a4f7	dis-kernel.asm	/^    a4f7:	c1 e0 09             	shl    $0x9,%eax$/;"	l
a4fa	dis-kernel.asm	/^    a4fa:	99                   	cltd   $/;"	l
a4fb	dis-kernel.asm	/^    a4fb:	8b 0d 20 a8 04 00    	mov    0x4a820,%ecx$/;"	l
a501	dis-kernel.asm	/^    a501:	8b 49 20             	mov    0x20(%ecx),%ecx$/;"	l
a504	dis-kernel.asm	/^    a504:	83 ec 04             	sub    $0x4,%esp$/;"	l
a507	dis-kernel.asm	/^    a507:	53                   	push   %ebx$/;"	l
a508	dis-kernel.asm	/^    a508:	6a 03                	push   $0x3$/;"	l
a50a	dis-kernel.asm	/^    a50a:	68 00 02 00 00       	push   $0x200$/;"	l
a50f	dis-kernel.asm	/^    a50f:	52                   	push   %edx$/;"	l
a510	dis-kernel.asm	/^    a510:	50                   	push   %eax$/;"	l
a511	dis-kernel.asm	/^    a511:	51                   	push   %ecx$/;"	l
a512	dis-kernel.asm	/^    a512:	68 eb 03 00 00       	push   $0x3eb$/;"	l
a517	dis-kernel.asm	/^    a517:	e8 40 d0 ff ff       	call   755c <rw_sector>$/;"	l
a51c	dis-kernel.asm	/^    a51c:	83 c4 20             	add    $0x20,%esp$/;"	l
a51f	dis-kernel.asm	/^    a51f:	a1 9c f7 00 00       	mov    0xf79c,%eax$/;"	l
a524	dis-kernel.asm	/^    a524:	83 ec 04             	sub    $0x4,%esp$/;"	l
a527	dis-kernel.asm	/^    a527:	68 00 02 00 00       	push   $0x200$/;"	l
a52c	dis-kernel.asm	/^    a52c:	50                   	push   %eax$/;"	l
a52d	dis-kernel.asm	/^    a52d:	68 60 06 01 00       	push   $0x10660$/;"	l
a532	dis-kernel.asm	/^    a532:	e8 a9 c3 ff ff       	call   68e0 <memcpy>$/;"	l
a537	dis-kernel.asm	/^    a537:	83 c4 10             	add    $0x10,%esp$/;"	l
a53a	dis-kernel.asm	/^    a53a:	c7 45 bc 60 06 01 00 	movl   $0x10660,-0x44(%ebp)$/;"	l
a541	dis-kernel.asm	/^    a541:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)$/;"	l
a548	dis-kernel.asm	/^    a548:	e9 c1 00 00 00       	jmp    a60e <dump_fd_graph+0xd3c>$/;"	l
a54d	dis-kernel.asm	/^    a54d:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a550	dis-kernel.asm	/^    a550:	8b 00                	mov    (%eax),%eax$/;"	l
a552	dis-kernel.asm	/^    a552:	85 c0                	test   %eax,%eax$/;"	l
a554	dis-kernel.asm	/^    a554:	0f 84 ac 00 00 00    	je     a606 <dump_fd_graph+0xd34>$/;"	l
a55a	dis-kernel.asm	/^    a55a:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a55d	dis-kernel.asm	/^    a55d:	83 c0 04             	add    $0x4,%eax$/;"	l
a560	dis-kernel.asm	/^    a560:	83 ec 04             	sub    $0x4,%esp$/;"	l
a563	dis-kernel.asm	/^    a563:	6a 0c                	push   $0xc$/;"	l
a565	dis-kernel.asm	/^    a565:	50                   	push   %eax$/;"	l
a566	dis-kernel.asm	/^    a566:	8d 85 6f fb ff ff    	lea    -0x491(%ebp),%eax$/;"	l
a56c	dis-kernel.asm	/^    a56c:	50                   	push   %eax$/;"	l
a56d	dis-kernel.asm	/^    a56d:	e8 6e c3 ff ff       	call   68e0 <memcpy>$/;"	l
a572	dis-kernel.asm	/^    a572:	83 c4 10             	add    $0x10,%esp$/;"	l
a575	dis-kernel.asm	/^    a575:	0f b6 85 6f fb ff ff 	movzbl -0x491(%ebp),%eax$/;"	l
a57c	dis-kernel.asm	/^    a57c:	3c 2e                	cmp    $0x2e,%al$/;"	l
a57e	dis-kernel.asm	/^    a57e:	75 07                	jne    a587 <dump_fd_graph+0xcb5>$/;"	l
a580	dis-kernel.asm	/^    a580:	c6 85 6f fb ff ff 2f 	movb   $0x2f,-0x491(%ebp)$/;"	l
a587	dis-kernel.asm	/^    a587:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a58a	dis-kernel.asm	/^    a58a:	8b 00                	mov    (%eax),%eax$/;"	l
a58c	dis-kernel.asm	/^    a58c:	83 ec 08             	sub    $0x8,%esp$/;"	l
a58f	dis-kernel.asm	/^    a58f:	50                   	push   %eax$/;"	l
a590	dis-kernel.asm	/^    a590:	68 c6 c4 00 00       	push   $0xc4c6$/;"	l
a595	dis-kernel.asm	/^    a595:	e8 d0 c6 ff ff       	call   6c6a <syslog>$/;"	l
a59a	dis-kernel.asm	/^    a59a:	83 c4 10             	add    $0x10,%esp$/;"	l
a59d	dis-kernel.asm	/^    a59d:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a5a0	dis-kernel.asm	/^    a5a0:	8b 00                	mov    (%eax),%eax$/;"	l
a5a2	dis-kernel.asm	/^    a5a2:	83 ec 04             	sub    $0x4,%esp$/;"	l
a5a5	dis-kernel.asm	/^    a5a5:	8d 95 6f fb ff ff    	lea    -0x491(%ebp),%edx$/;"	l
a5ab	dis-kernel.asm	/^    a5ab:	52                   	push   %edx$/;"	l
a5ac	dis-kernel.asm	/^    a5ac:	50                   	push   %eax$/;"	l
a5ad	dis-kernel.asm	/^    a5ad:	68 da c4 00 00       	push   $0xc4da$/;"	l
a5b2	dis-kernel.asm	/^    a5b2:	e8 b3 c6 ff ff       	call   6c6a <syslog>$/;"	l
a5b7	dis-kernel.asm	/^    a5b7:	83 c4 10             	add    $0x10,%esp$/;"	l
a5ba	dis-kernel.asm	/^    a5ba:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a5bd	dis-kernel.asm	/^    a5bd:	68 4e c1 00 00       	push   $0xc14e$/;"	l
a5c2	dis-kernel.asm	/^    a5c2:	e8 a3 c6 ff ff       	call   6c6a <syslog>$/;"	l
a5c7	dis-kernel.asm	/^    a5c7:	83 c4 10             	add    $0x10,%esp$/;"	l
a5ca	dis-kernel.asm	/^    a5ca:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a5cd	dis-kernel.asm	/^    a5cd:	68 52 c1 00 00       	push   $0xc152$/;"	l
a5d2	dis-kernel.asm	/^    a5d2:	e8 93 c6 ff ff       	call   6c6a <syslog>$/;"	l
a5d7	dis-kernel.asm	/^    a5d7:	83 c4 10             	add    $0x10,%esp$/;"	l
a5da	dis-kernel.asm	/^    a5da:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a5dd	dis-kernel.asm	/^    a5dd:	68 67 c1 00 00       	push   $0xc167$/;"	l
a5e2	dis-kernel.asm	/^    a5e2:	e8 83 c6 ff ff       	call   6c6a <syslog>$/;"	l
a5e7	dis-kernel.asm	/^    a5e7:	83 c4 10             	add    $0x10,%esp$/;"	l
a5ea	dis-kernel.asm	/^    a5ea:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a5ed	dis-kernel.asm	/^    a5ed:	8b 10                	mov    (%eax),%edx$/;"	l
a5ef	dis-kernel.asm	/^    a5ef:	8b 45 bc             	mov    -0x44(%ebp),%eax$/;"	l
a5f2	dis-kernel.asm	/^    a5f2:	8b 00                	mov    (%eax),%eax$/;"	l
a5f4	dis-kernel.asm	/^    a5f4:	83 ec 04             	sub    $0x4,%esp$/;"	l
a5f7	dis-kernel.asm	/^    a5f7:	52                   	push   %edx$/;"	l
a5f8	dis-kernel.asm	/^    a5f8:	50                   	push   %eax$/;"	l
a5f9	dis-kernel.asm	/^    a5f9:	68 f8 c4 00 00       	push   $0xc4f8$/;"	l
a5fe	dis-kernel.asm	/^    a5fe:	e8 67 c6 ff ff       	call   6c6a <syslog>$/;"	l
a603	dis-kernel.asm	/^    a603:	83 c4 10             	add    $0x10,%esp$/;"	l
a606	dis-kernel.asm	/^    a606:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)$/;"	l
a60a	dis-kernel.asm	/^    a60a:	83 45 bc 10          	addl   $0x10,-0x44(%ebp)$/;"	l
a60e	dis-kernel.asm	/^    a60e:	8b 45 c4             	mov    -0x3c(%ebp),%eax$/;"	l
a611	dis-kernel.asm	/^    a611:	83 f8 1f             	cmp    $0x1f,%eax$/;"	l
a614	dis-kernel.asm	/^    a614:	0f 86 33 ff ff ff    	jbe    a54d <dump_fd_graph+0xc7b>$/;"	l
a61a	dis-kernel.asm	/^    a61a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax$/;"	l
a620	dis-kernel.asm	/^    a620:	3b 45 80             	cmp    -0x80(%ebp),%eax$/;"	l
a623	dis-kernel.asm	/^    a623:	7f 12                	jg     a637 <dump_fd_graph+0xd65>$/;"	l
a625	dis-kernel.asm	/^    a625:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a629	dis-kernel.asm	/^    a629:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a62c	dis-kernel.asm	/^    a62c:	3b 45 84             	cmp    -0x7c(%ebp),%eax$/;"	l
a62f	dis-kernel.asm	/^    a62f:	0f 8c b4 fe ff ff    	jl     a4e9 <dump_fd_graph+0xc17>$/;"	l
a635	dis-kernel.asm	/^    a635:	eb 01                	jmp    a638 <dump_fd_graph+0xd66>$/;"	l
a637	dis-kernel.asm	/^    a637:	90                   	nop$/;"	l
a638	dis-kernel.asm	/^    a638:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a63b	dis-kernel.asm	/^    a63b:	68 22 c5 00 00       	push   $0xc522$/;"	l
a640	dis-kernel.asm	/^    a640:	e8 25 c6 ff ff       	call   6c6a <syslog>$/;"	l
a645	dis-kernel.asm	/^    a645:	83 c4 10             	add    $0x10,%esp$/;"	l
a648	dis-kernel.asm	/^    a648:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a64b	dis-kernel.asm	/^    a64b:	68 81 c1 00 00       	push   $0xc181$/;"	l
a650	dis-kernel.asm	/^    a650:	e8 15 c6 ff ff       	call   6c6a <syslog>$/;"	l
a655	dis-kernel.asm	/^    a655:	83 c4 10             	add    $0x10,%esp$/;"	l
a658	dis-kernel.asm	/^    a658:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a65f	dis-kernel.asm	/^    a65f:	eb 5c                	jmp    a6bd <dump_fd_graph+0xdeb>$/;"	l
a661	dis-kernel.asm	/^    a661:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
a664	dis-kernel.asm	/^    a664:	89 d0                	mov    %edx,%eax$/;"	l
a666	dis-kernel.asm	/^    a666:	01 c0                	add    %eax,%eax$/;"	l
a668	dis-kernel.asm	/^    a668:	01 d0                	add    %edx,%eax$/;"	l
a66a	dis-kernel.asm	/^    a66a:	c1 e0 02             	shl    $0x2,%eax$/;"	l
a66d	dis-kernel.asm	/^    a66d:	8d 75 e8             	lea    -0x18(%ebp),%esi$/;"	l
a670	dis-kernel.asm	/^    a670:	01 f0                	add    %esi,%eax$/;"	l
a672	dis-kernel.asm	/^    a672:	2d f4 10 00 00       	sub    $0x10f4,%eax$/;"	l
a677	dis-kernel.asm	/^    a677:	8b 18                	mov    (%eax),%ebx$/;"	l
a679	dis-kernel.asm	/^    a679:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
a67c	dis-kernel.asm	/^    a67c:	89 d0                	mov    %edx,%eax$/;"	l
a67e	dis-kernel.asm	/^    a67e:	01 c0                	add    %eax,%eax$/;"	l
a680	dis-kernel.asm	/^    a680:	01 d0                	add    %edx,%eax$/;"	l
a682	dis-kernel.asm	/^    a682:	c1 e0 02             	shl    $0x2,%eax$/;"	l
a685	dis-kernel.asm	/^    a685:	8d 7d e8             	lea    -0x18(%ebp),%edi$/;"	l
a688	dis-kernel.asm	/^    a688:	01 f8                	add    %edi,%eax$/;"	l
a68a	dis-kernel.asm	/^    a68a:	2d f8 10 00 00       	sub    $0x10f8,%eax$/;"	l
a68f	dis-kernel.asm	/^    a68f:	8b 08                	mov    (%eax),%ecx$/;"	l
a691	dis-kernel.asm	/^    a691:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
a694	dis-kernel.asm	/^    a694:	89 d0                	mov    %edx,%eax$/;"	l
a696	dis-kernel.asm	/^    a696:	01 c0                	add    %eax,%eax$/;"	l
a698	dis-kernel.asm	/^    a698:	01 d0                	add    %edx,%eax$/;"	l
a69a	dis-kernel.asm	/^    a69a:	c1 e0 02             	shl    $0x2,%eax$/;"	l
a69d	dis-kernel.asm	/^    a69d:	8d 75 e8             	lea    -0x18(%ebp),%esi$/;"	l
a6a0	dis-kernel.asm	/^    a6a0:	01 f0                	add    %esi,%eax$/;"	l
a6a2	dis-kernel.asm	/^    a6a2:	2d fc 10 00 00       	sub    $0x10fc,%eax$/;"	l
a6a7	dis-kernel.asm	/^    a6a7:	8b 00                	mov    (%eax),%eax$/;"	l
a6a9	dis-kernel.asm	/^    a6a9:	53                   	push   %ebx$/;"	l
a6aa	dis-kernel.asm	/^    a6aa:	51                   	push   %ecx$/;"	l
a6ab	dis-kernel.asm	/^    a6ab:	50                   	push   %eax$/;"	l
a6ac	dis-kernel.asm	/^    a6ac:	68 3c c5 00 00       	push   $0xc53c$/;"	l
a6b1	dis-kernel.asm	/^    a6b1:	e8 b4 c5 ff ff       	call   6c6a <syslog>$/;"	l
a6b6	dis-kernel.asm	/^    a6b6:	83 c4 10             	add    $0x10,%esp$/;"	l
a6b9	dis-kernel.asm	/^    a6b9:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a6bd	dis-kernel.asm	/^    a6bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a6c0	dis-kernel.asm	/^    a6c0:	3b 45 e0             	cmp    -0x20(%ebp),%eax$/;"	l
a6c3	dis-kernel.asm	/^    a6c3:	7c 9c                	jl     a661 <dump_fd_graph+0xd8f>$/;"	l
a6c5	dis-kernel.asm	/^    a6c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a6cc	dis-kernel.asm	/^    a6cc:	eb 2a                	jmp    a6f8 <dump_fd_graph+0xe26>$/;"	l
a6ce	dis-kernel.asm	/^    a6ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a6d1	dis-kernel.asm	/^    a6d1:	8b 94 c5 f0 e6 ff ff 	mov    -0x1910(%ebp,%eax,8),%edx$/;"	l
a6d8	dis-kernel.asm	/^    a6d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a6db	dis-kernel.asm	/^    a6db:	8b 84 c5 ec e6 ff ff 	mov    -0x1914(%ebp,%eax,8),%eax$/;"	l
a6e2	dis-kernel.asm	/^    a6e2:	83 ec 04             	sub    $0x4,%esp$/;"	l
a6e5	dis-kernel.asm	/^    a6e5:	52                   	push   %edx$/;"	l
a6e6	dis-kernel.asm	/^    a6e6:	50                   	push   %eax$/;"	l
a6e7	dis-kernel.asm	/^    a6e7:	68 60 c5 00 00       	push   $0xc560$/;"	l
a6ec	dis-kernel.asm	/^    a6ec:	e8 79 c5 ff ff       	call   6c6a <syslog>$/;"	l
a6f1	dis-kernel.asm	/^    a6f1:	83 c4 10             	add    $0x10,%esp$/;"	l
a6f4	dis-kernel.asm	/^    a6f4:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a6f8	dis-kernel.asm	/^    a6f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a6fb	dis-kernel.asm	/^    a6fb:	3b 45 dc             	cmp    -0x24(%ebp),%eax$/;"	l
a6fe	dis-kernel.asm	/^    a6fe:	7c ce                	jl     a6ce <dump_fd_graph+0xdfc>$/;"	l
a700	dis-kernel.asm	/^    a700:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a707	dis-kernel.asm	/^    a707:	eb 36                	jmp    a73f <dump_fd_graph+0xe6d>$/;"	l
a709	dis-kernel.asm	/^    a709:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a70c	dis-kernel.asm	/^    a70c:	6b c0 2c             	imul   $0x2c,%eax,%eax$/;"	l
a70f	dis-kernel.asm	/^    a70f:	05 c4 08 01 00       	add    $0x108c4,%eax$/;"	l
a714	dis-kernel.asm	/^    a714:	8b 00                	mov    (%eax),%eax$/;"	l
a716	dis-kernel.asm	/^    a716:	85 c0                	test   %eax,%eax$/;"	l
a718	dis-kernel.asm	/^    a718:	74 21                	je     a73b <dump_fd_graph+0xe69>$/;"	l
a71a	dis-kernel.asm	/^    a71a:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
a71d	dis-kernel.asm	/^    a71d:	6b c0 2c             	imul   $0x2c,%eax,%eax$/;"	l
a720	dis-kernel.asm	/^    a720:	05 c8 08 01 00       	add    $0x108c8,%eax$/;"	l
a725	dis-kernel.asm	/^    a725:	8b 00                	mov    (%eax),%eax$/;"	l
a727	dis-kernel.asm	/^    a727:	83 ec 04             	sub    $0x4,%esp$/;"	l
a72a	dis-kernel.asm	/^    a72a:	50                   	push   %eax$/;"	l
a72b	dis-kernel.asm	/^    a72b:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
a72e	dis-kernel.asm	/^    a72e:	68 84 c5 00 00       	push   $0xc584$/;"	l
a733	dis-kernel.asm	/^    a733:	e8 32 c5 ff ff       	call   6c6a <syslog>$/;"	l
a738	dis-kernel.asm	/^    a738:	83 c4 10             	add    $0x10,%esp$/;"	l
a73b	dis-kernel.asm	/^    a73b:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)$/;"	l
a73f	dis-kernel.asm	/^    a73f:	83 7d e4 3f          	cmpl   $0x3f,-0x1c(%ebp)$/;"	l
a743	dis-kernel.asm	/^    a743:	7e c4                	jle    a709 <dump_fd_graph+0xe37>$/;"	l
a745	dis-kernel.asm	/^    a745:	83 ec 08             	sub    $0x8,%esp$/;"	l
a748	dis-kernel.asm	/^    a748:	8d 85 7c fb ff ff    	lea    -0x484(%ebp),%eax$/;"	l
a74e	dis-kernel.asm	/^    a74e:	50                   	push   %eax$/;"	l
a74f	dis-kernel.asm	/^    a74f:	68 a9 c5 00 00       	push   $0xc5a9$/;"	l
a754	dis-kernel.asm	/^    a754:	e8 11 c5 ff ff       	call   6c6a <syslog>$/;"	l
a759	dis-kernel.asm	/^    a759:	83 c4 10             	add    $0x10,%esp$/;"	l
a75c	dis-kernel.asm	/^    a75c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a75f	dis-kernel.asm	/^    a75f:	68 b9 c5 00 00       	push   $0xc5b9$/;"	l
a764	dis-kernel.asm	/^    a764:	e8 01 c5 ff ff       	call   6c6a <syslog>$/;"	l
a769	dis-kernel.asm	/^    a769:	83 c4 10             	add    $0x10,%esp$/;"	l
a76c	dis-kernel.asm	/^    a76c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a76f	dis-kernel.asm	/^    a76f:	68 bc c5 00 00       	push   $0xc5bc$/;"	l
a774	dis-kernel.asm	/^    a774:	e8 f1 c4 ff ff       	call   6c6a <syslog>$/;"	l
a779	dis-kernel.asm	/^    a779:	83 c4 10             	add    $0x10,%esp$/;"	l
a77c	dis-kernel.asm	/^    a77c:	90                   	nop$/;"	l
a77d	dis-kernel.asm	/^    a77d:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a780	dis-kernel.asm	/^    a780:	5b                   	pop    %ebx$/;"	l
a781	dis-kernel.asm	/^    a781:	5e                   	pop    %esi$/;"	l
a782	dis-kernel.asm	/^    a782:	5f                   	pop    %edi$/;"	l
a783	dis-kernel.asm	/^    a783:	5d                   	pop    %ebp$/;"	l
a784	dis-kernel.asm	/^    a784:	c3                   	ret    $/;"	l
alloc_imap_bit	fs/open.c	/^PRIVATE int alloc_imap_bit(int dev)$/;"	f
alloc_smap_bit	fs/open.c	/^PRIVATE int alloc_smap_bit(int dev, int nr_sects_to_alloc)$/;"	f
alt_l	kernel/keyboard.c	/^PRIVATE	int		alt_l;		\/* l alt state		*\/$/;"	v
alt_r	kernel/keyboard.c	/^PRIVATE	int		alt_r;		\/* r left state		*\/$/;"	v
assert	include/stdio.h	14;"	d
assert	include/stdio.h	17;"	d
assertion_failure	lib/misc.c	/^PUBLIC void assertion_failure(char *exp, char *file, char *base_file, int line)$/;"	f
attr	include/sys/protect.h	/^	u8	attr;		\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:gate
attr1	include/sys/protect.h	/^	u8	attr1;			\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:descriptor
bOdd	boot/boot.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
bOdd	boot/loader.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
backlink	include/sys/protect.h	/^	u32	backlink;$/;"	m	struct:tss
base	include/sys/hd.h	/^	u32	base;	\/* # of start sector (NOT byte offset, but SECTOR) *\/$/;"	m	struct:part_info
base_high	include/sys/protect.h	/^	u8	base_high;		\/* Base *\/$/;"	m	struct:descriptor
base_low	include/sys/protect.h	/^	u16	base_low;		\/* Base *\/$/;"	m	struct:descriptor
base_mid	include/sys/protect.h	/^	u8	base_mid;		\/* Base *\/$/;"	m	struct:descriptor
bits	kernel/kernel.asm	/^bits 32$/;"	l
bits	lib/syscall.asm	/^bits 32$/;"	l
block	kernel/proc.c	/^PRIVATE void block(struct proc* p)$/;"	f
boot_ind	include/sys/hd.h	/^	u8 boot_ind;		\/**$/;"	m	struct:part_ent
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
buf	include/sys/keyboard.h	/^	char	buf[KB_IN_BYTES];	\/* 缓冲区 *\/$/;"	m	struct:kb_inbuf
caps_lock	kernel/keyboard.c	/^PRIVATE	int		caps_lock;	\/* Caps Lock		*\/$/;"	v
clear_screen	kernel/console.c	/^PRIVATE void clear_screen(int pos, int len)$/;"	f
clock_handler	kernel/clock.c	/^PUBLIC void clock_handler(int irq)$/;"	f
clock_int_msg	kernel/kernel.asm	/^clock_int_msg		db	"^", 0$/;"	d
close	lib/close.c	/^PUBLIC int close(int fd)$/;"	f
code_with_E0	kernel/keyboard.c	/^PRIVATE	int		code_with_E0;$/;"	v
column	kernel/keyboard.c	/^PRIVATE	int		column;$/;"	v
command	include/sys/hd.h	/^	u8	command;$/;"	m	struct:hd_cmd
con_size	include/sys/console.h	/^	unsigned int	con_size;   \/* how many words does the console have *\/$/;"	m	struct:s_console
console	include/sys/tty.h	/^	struct s_console *	console;$/;"	m	struct:s_tty	typeref:struct:s_tty::s_console
console_table	kernel/global.c	/^PUBLIC	CONSOLE		console_table[NR_CONSOLES];$/;"	v
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
count	include/sys/hd.h	/^	u8	count;$/;"	m	struct:hd_cmd
count	include/sys/keyboard.h	/^	int	count;			\/* 缓冲区中共有多少字节 *\/$/;"	m	struct:kb_inbuf
cr3	include/sys/protect.h	/^	u32	cr3;$/;"	m	struct:tss
create_file	fs/open.c	/^PRIVATE struct inode * create_file(char * path, int flags)$/;"	f
crtc_start	include/sys/console.h	/^	unsigned int	crtc_start; \/* set CRTC start addr reg *\/$/;"	m	struct:s_console
cs	include/sys/proc.h	/^	u32	cs;		\/*  ┃						│			*\/$/;"	m	struct:stackframe
cs	include/sys/protect.h	/^	u32	cs;$/;"	m	struct:tss
csinit	kernel/kernel.asm	/^csinit:		; “这个跳转指令强制使用刚刚初始化的结构”——<<OS:D&I 2nd>> P90.$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f
ctrl_l	kernel/keyboard.c	/^PRIVATE	int		ctrl_l;		\/* l ctrl state		*\/$/;"	v
ctrl_r	kernel/keyboard.c	/^PRIVATE	int		ctrl_r;		\/* l ctrl state		*\/$/;"	v
current_console	include/sys/global.h	/^EXTERN	int	current_console;$/;"	v
cursor	include/sys/console.h	/^	unsigned int	cursor;$/;"	m	struct:s_console
dcount	include/sys/protect.h	/^	u8	dcount;		\/* 该字段只在调用门描述符中有效。$/;"	m	struct:gate
dd_map	kernel/global.c	/^struct dev_drv_map dd_map[] = {$/;"	v	typeref:struct:dev_drv_map
deadlock	kernel/proc.c	/^PRIVATE int deadlock(int src, int dest)$/;"	f
dec	boot/boot.asm	/^	dec	dx					; ┛就跳到下一个 Sector$/;"	d
dec	boot/loader.asm	/^	dec	dx					; ┛$/;"	d
delay	lib/klib.c	/^PUBLIC void delay(int time)$/;"	f
descriptor	include/sys/protect.h	/^struct descriptor		\/* 共 8 个字节 *\/$/;"	s
dev_drv_map	include/sys/fs.h	/^struct dev_drv_map {$/;"	s
device	include/sys/hd.h	/^	u8	device;$/;"	m	struct:hd_cmd
dir_ent_fname_off	include/sys/fs.h	/^	u32	dir_ent_fname_off;\/**< Offset of `struct dir_entry::name' *\/$/;"	m	struct:super_block
dir_ent_inode_off	include/sys/fs.h	/^	u32	dir_ent_inode_off;\/**< Offset of `struct dir_entry::inode_nr' *\/$/;"	m	struct:super_block
dir_ent_size	include/sys/fs.h	/^	u32	dir_ent_size;     \/**< DIR_ENTRY_SIZE *\/$/;"	m	struct:super_block
dir_entry	include/sys/fs.h	/^struct dir_entry {$/;"	s
dis_already	lib/kliba.asm	/^dis_already:$/;"	l
disable_0	lib/kliba.asm	/^disable_0:$/;"	l
disable_8	lib/kliba.asm	/^disable_8:$/;"	l
disable_int	lib/kliba.asm	/^disable_int:$/;"	l
disable_irq	lib/kliba.asm	/^disable_irq:$/;"	l
disklog	fs/disklog.c	/^PUBLIC int disklog(char * logstr)$/;"	f
disp_color_str	lib/kliba.asm	/^disp_color_str:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int input)$/;"	f
disp_pos	include/sys/global.h	/^EXTERN	int	disp_pos;$/;"	v
disp_str	lib/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
do_close	fs/open.c	/^PUBLIC int do_close()$/;"	f
do_disklog	fs/disklog.c	/^PUBLIC int do_disklog()$/;"	f
do_lseek	fs/open.c	/^PUBLIC int do_lseek()$/;"	f
do_open	fs/open.c	/^PUBLIC int do_open()$/;"	f
do_rdwt	fs/read_write.c	/^PUBLIC int do_rdwt()$/;"	f
do_unlink	fs/link.c	/^PUBLIC int do_unlink()$/;"	f
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
driver_nr	include/sys/fs.h	/^	int driver_nr; \/**< The proc nr.\\ of the device driver. *\/$/;"	m	struct:dev_drv_map
ds	include/sys/proc.h	/^	u32	ds;		\/* ┃						│			*\/$/;"	m	struct:stackframe
ds	include/sys/protect.h	/^	u32	ds;$/;"	m	struct:tss
dump_fd_graph	fs/disklog.c	/^PUBLIC void dump_fd_graph(const char * fmt, ...)$/;"	f
dump_msg	kernel/proc.c	/^PUBLIC void dump_msg(const char * title, MESSAGE* m)$/;"	f
dump_proc	kernel/proc.c	/^PUBLIC void dump_proc(struct proc* p)$/;"	f
dump_tty_buf	kernel/tty.c	/^PUBLIC void dump_tty_buf()$/;"	f
dw	boot/boot.asm	/^dw 	0xaa55				; 结束标志$/;"	l
dwBaseAddrHigh	boot/loader.asm	/^	dwBaseAddrHigh	equ	LOADER_PHY_ADDR + _dwBaseAddrHigh$/;"	d
dwBaseAddrLow	boot/loader.asm	/^	dwBaseAddrLow	equ	LOADER_PHY_ADDR + _dwBaseAddrLow$/;"	d
dwDispPos	boot/loader.asm	/^dwDispPos		equ	LOADER_PHY_ADDR + _dwDispPos$/;"	d
dwKernelSize	boot/loader.asm	/^dwKernelSize		dd	0		; KERNEL.BIN 文件大小$/;"	d
dwLengthHigh	boot/loader.asm	/^	dwLengthHigh	equ	LOADER_PHY_ADDR + _dwLengthHigh$/;"	d
dwLengthLow	boot/loader.asm	/^	dwLengthLow	equ	LOADER_PHY_ADDR + _dwLengthLow$/;"	d
dwMCRNumber	boot/loader.asm	/^dwMCRNumber		equ	LOADER_PHY_ADDR + _dwMCRNumber$/;"	d
dwMemSize	boot/loader.asm	/^dwMemSize		equ	LOADER_PHY_ADDR + _dwMemSize$/;"	d
dwType	boot/loader.asm	/^	dwType		equ	LOADER_PHY_ADDR + _dwType$/;"	d
eax	include/sys/proc.h	/^	u32	eax;		\/* ┛						│			*\/$/;"	m	struct:stackframe
eax	include/sys/protect.h	/^	u32	eax;$/;"	m	struct:tss
ebp	include/sys/proc.h	/^	u32	ebp;		\/* ┃						│			*\/$/;"	m	struct:stackframe
ebp	include/sys/protect.h	/^	u32	ebp;$/;"	m	struct:tss
ebx	include/sys/proc.h	/^	u32	ebx;		\/* ┃						↑栈从高地址往低地址增长*\/		$/;"	m	struct:stackframe
ebx	include/sys/protect.h	/^	u32	ebx;$/;"	m	struct:tss
ecx	include/sys/proc.h	/^	u32	ecx;		\/* ┃						│			*\/$/;"	m	struct:stackframe
ecx	include/sys/protect.h	/^	u32	ecx;$/;"	m	struct:tss
edi	include/sys/proc.h	/^	u32	edi;		\/* ┃						│			*\/$/;"	m	struct:stackframe
edi	include/sys/protect.h	/^	u32	edi;$/;"	m	struct:tss
edx	include/sys/proc.h	/^	u32	edx;		\/* ┃						│			*\/$/;"	m	struct:stackframe
edx	include/sys/protect.h	/^	u32	edx;$/;"	m	struct:tss
eflags	include/sys/proc.h	/^	u32	eflags;		\/*  ┣ these are pushed by CPU during interrupt	│			*\/$/;"	m	struct:stackframe
eip	include/sys/proc.h	/^	u32	eip;		\/*  ┓						│			*\/$/;"	m	struct:stackframe
eip	include/sys/protect.h	/^	u32	eip;$/;"	m	struct:tss
enable_0	lib/kliba.asm	/^enable_0:$/;"	l
enable_8	lib/kliba.asm	/^enable_8:$/;"	l
enable_int	lib/kliba.asm	/^enable_int:$/;"	l
enable_irq	lib/kliba.asm	/^enable_irq:$/;"	l
end_cyl	include/sys/hd.h	/^	u8 end_cyl;		\/**$/;"	m	struct:part_ent
end_head	include/sys/hd.h	/^	u8 end_head;		\/**$/;"	m	struct:part_ent
end_sector	include/sys/hd.h	/^	u8 end_sector;		\/**$/;"	m	struct:part_ent
es	include/sys/proc.h	/^	u32	es;		\/* ┃						│			*\/$/;"	m	struct:stackframe
es	include/sys/protect.h	/^	u32	es;$/;"	m	struct:tss
esi	include/sys/proc.h	/^	u32	esi;		\/* ┣ pushed by save()				│			*\/$/;"	m	struct:stackframe
esi	include/sys/protect.h	/^	u32	esi;$/;"	m	struct:tss
esp	include/sys/proc.h	/^	u32	esp;		\/*  ┃						│			*\/$/;"	m	struct:stackframe
esp	include/sys/protect.h	/^	u32	esp;$/;"	m	struct:tss
esp0	include/sys/protect.h	/^	u32	esp0;		\/* stack pointer to use during interrupt *\/$/;"	m	struct:tss
esp1	include/sys/protect.h	/^	u32	esp1;$/;"	m	struct:tss
esp2	include/sys/protect.h	/^	u32	esp2;$/;"	m	struct:tss
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no, int err_code, int eip, int cs, int eflags)$/;"	f
extern	kernel/kernel.asm	/^extern	clock_handler$/;"	l
extern	kernel/kernel.asm	/^extern	cstart$/;"	l
extern	kernel/kernel.asm	/^extern	delay$/;"	l
extern	kernel/kernel.asm	/^extern	disp_pos$/;"	l
extern	kernel/kernel.asm	/^extern	disp_str$/;"	l
extern	kernel/kernel.asm	/^extern	exception_handler$/;"	l
extern	kernel/kernel.asm	/^extern	gdt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	idt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	irq_table$/;"	l
extern	kernel/kernel.asm	/^extern	k_reenter$/;"	l
extern	kernel/kernel.asm	/^extern	kernel_main$/;"	l
extern	kernel/kernel.asm	/^extern	p_proc_ready$/;"	l
extern	kernel/kernel.asm	/^extern	spurious_irq$/;"	l
extern	kernel/kernel.asm	/^extern	sys_call_table$/;"	l
extern	kernel/kernel.asm	/^extern	tss$/;"	l
extern	lib/kliba.asm	/^extern	disp_pos$/;"	l
f_desc_table	include/sys/global.h	/^EXTERN	struct file_desc	f_desc_table[NR_FILE_DESC];$/;"	v	typeref:struct:file_desc
fd_inode	include/sys/fs.h	/^	struct inode*	fd_inode;	\/**< Ptr to the i-node *\/$/;"	m	struct:file_desc	typeref:struct:file_desc::inode
fd_mode	include/sys/fs.h	/^	int		fd_mode;	\/**< R or W *\/$/;"	m	struct:file_desc
fd_pos	include/sys/fs.h	/^	int		fd_pos;		\/**< Current position for R\/W. *\/$/;"	m	struct:file_desc
features	include/sys/hd.h	/^	u8	features;$/;"	m	struct:hd_cmd
file_desc	include/sys/fs.h	/^struct file_desc {$/;"	s
filp	include/sys/proc.h	/^	struct file_desc * filp[NR_FILES];$/;"	m	struct:proc	typeref:struct:proc::file_desc
flags	include/sys/protect.h	/^	u32	flags;$/;"	m	struct:tss
flush	kernel/console.c	/^PRIVATE void flush(CONSOLE* con)$/;"	f
fs	include/sys/proc.h	/^	u32	fs;		\/* ┃						│			*\/$/;"	m	struct:stackframe
fs	include/sys/protect.h	/^	u32	fs;$/;"	m	struct:tss
fs_msg	include/sys/global.h	/^EXTERN	MESSAGE			fs_msg;$/;"	v
fsbuf	kernel/global.c	/^PUBLIC	u8 *		fsbuf		= (u8*)0x600000;$/;"	v
gate	include/sys/protect.h	/^struct gate$/;"	s
gdt	include/sys/global.h	/^EXTERN	struct descriptor	gdt[GDT_SIZE];$/;"	v	typeref:struct:descriptor
gdt_ptr	include/sys/global.h	/^EXTERN	u8			gdt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
get_byte_from_kb_buf	kernel/keyboard.c	/^PRIVATE u8 get_byte_from_kb_buf()$/;"	f
get_inode	fs/main.c	/^PUBLIC struct inode * get_inode(int dev, int num)$/;"	f
get_part_table	kernel/hd.c	/^PRIVATE void get_part_table(int drive, int sect_nr, struct part_ent * entry)$/;"	f
get_super_block	fs/main.c	/^PUBLIC struct super_block * get_super_block(int dev)$/;"	f
get_ticks	kernel/main.c	/^PUBLIC int get_ticks()$/;"	f
getpid	lib/getpid.c	/^PUBLIC int getpid()$/;"	f
glitter	lib/kliba.asm	/^glitter:$/;"	l
global	kernel/kernel.asm	/^global	bounds_check$/;"	l
global	kernel/kernel.asm	/^global	breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global	copr_error$/;"	l
global	kernel/kernel.asm	/^global	copr_not_available$/;"	l
global	kernel/kernel.asm	/^global	copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global	divide_error$/;"	l
global	kernel/kernel.asm	/^global	double_fault$/;"	l
global	kernel/kernel.asm	/^global	general_protection$/;"	l
global	kernel/kernel.asm	/^global	hwint00$/;"	l
global	kernel/kernel.asm	/^global	hwint01$/;"	l
global	kernel/kernel.asm	/^global	hwint02$/;"	l
global	kernel/kernel.asm	/^global	hwint03$/;"	l
global	kernel/kernel.asm	/^global	hwint04$/;"	l
global	kernel/kernel.asm	/^global	hwint05$/;"	l
global	kernel/kernel.asm	/^global	hwint06$/;"	l
global	kernel/kernel.asm	/^global	hwint07$/;"	l
global	kernel/kernel.asm	/^global	hwint08$/;"	l
global	kernel/kernel.asm	/^global	hwint09$/;"	l
global	kernel/kernel.asm	/^global	hwint10$/;"	l
global	kernel/kernel.asm	/^global	hwint11$/;"	l
global	kernel/kernel.asm	/^global	hwint12$/;"	l
global	kernel/kernel.asm	/^global	hwint13$/;"	l
global	kernel/kernel.asm	/^global	hwint14$/;"	l
global	kernel/kernel.asm	/^global	hwint15$/;"	l
global	kernel/kernel.asm	/^global	inval_opcode$/;"	l
global	kernel/kernel.asm	/^global	inval_tss$/;"	l
global	kernel/kernel.asm	/^global	nmi$/;"	l
global	kernel/kernel.asm	/^global	overflow$/;"	l
global	kernel/kernel.asm	/^global	page_fault$/;"	l
global	kernel/kernel.asm	/^global	segment_not_present$/;"	l
global	kernel/kernel.asm	/^global	single_step_exception$/;"	l
global	kernel/kernel.asm	/^global	stack_exception$/;"	l
global	kernel/kernel.asm	/^global _start	; 导出 _start$/;"	l
global	kernel/kernel.asm	/^global restart$/;"	l
global	kernel/kernel.asm	/^global sys_call$/;"	l
global	lib/kliba.asm	/^global	disable_int$/;"	l
global	lib/kliba.asm	/^global	disable_irq$/;"	l
global	lib/kliba.asm	/^global	disp_color_str$/;"	l
global	lib/kliba.asm	/^global	disp_str$/;"	l
global	lib/kliba.asm	/^global	enable_int$/;"	l
global	lib/kliba.asm	/^global	enable_irq$/;"	l
global	lib/kliba.asm	/^global	glitter$/;"	l
global	lib/kliba.asm	/^global	in_byte$/;"	l
global	lib/kliba.asm	/^global	out_byte$/;"	l
global	lib/kliba.asm	/^global	port_read$/;"	l
global	lib/kliba.asm	/^global	port_write$/;"	l
global	lib/string.asm	/^global	memcpy$/;"	l
global	lib/string.asm	/^global	memset$/;"	l
global	lib/string.asm	/^global  strcpy$/;"	l
global	lib/string.asm	/^global  strlen$/;"	l
global	lib/syscall.asm	/^global	printx$/;"	l
global	lib/syscall.asm	/^global	sendrec$/;"	l
gs	include/sys/proc.h	/^	u32	gs;		\/* ┓						│			*\/$/;"	m	struct:stackframe
gs	include/sys/protect.h	/^	u32	gs;$/;"	m	struct:tss
has_int_msg	include/sys/proc.h	/^	int has_int_msg;           \/**$/;"	m	struct:proc
hd_close	kernel/hd.c	/^PRIVATE void hd_close(int device)$/;"	f
hd_cmd	include/sys/hd.h	/^struct hd_cmd {$/;"	s
hd_cmd_out	kernel/hd.c	/^PRIVATE void hd_cmd_out(struct hd_cmd* cmd)$/;"	f
hd_handler	kernel/hd.c	/^PUBLIC void hd_handler(int irq)$/;"	f
hd_identify	kernel/hd.c	/^PRIVATE void hd_identify(int drive)$/;"	f
hd_info	include/sys/hd.h	/^struct hd_info$/;"	s
hd_info	kernel/hd.c	/^PRIVATE	struct hd_info	hd_info[1];$/;"	v	typeref:struct:hd_info
hd_ioctl	kernel/hd.c	/^PRIVATE void hd_ioctl(MESSAGE * p)$/;"	f
hd_open	kernel/hd.c	/^PRIVATE void hd_open(int device)$/;"	f
hd_rdwt	kernel/hd.c	/^PRIVATE void hd_rdwt(MESSAGE * p)$/;"	f
hd_status	kernel/hd.c	/^PRIVATE	u8		hd_status;$/;"	v
hdbuf	kernel/hd.c	/^PRIVATE	u8		hdbuf[SECTOR_SIZE * 2];$/;"	v
hwint00	kernel/kernel.asm	/^hwint00:		; Interrupt routine for irq 0 (the clock).$/;"	l
hwint01	kernel/kernel.asm	/^hwint01:		; Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel/kernel.asm	/^hwint02:		; Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel/kernel.asm	/^hwint03:		; Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel/kernel.asm	/^hwint04:		; Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel/kernel.asm	/^hwint05:		; Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel/kernel.asm	/^hwint06:		; Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel/kernel.asm	/^hwint07:		; Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel/kernel.asm	/^hwint08:		; Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel/kernel.asm	/^hwint09:		; Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel/kernel.asm	/^hwint10:		; Interrupt routine for irq 10$/;"	l
hwint11	kernel/kernel.asm	/^hwint11:		; Interrupt routine for irq 11$/;"	l
hwint12	kernel/kernel.asm	/^hwint12:		; Interrupt routine for irq 12$/;"	l
hwint13	kernel/kernel.asm	/^hwint13:		; Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel/kernel.asm	/^hwint14:		; Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel/kernel.asm	/^hwint15:		; Interrupt routine for irq 15$/;"	l
i2a	lib/vsprintf.c	/^PRIVATE char* i2a(int val, int base, char ** ps)$/;"	f
i_cnt	include/sys/fs.h	/^	int	i_cnt;		\/**< How many procs share this inode  *\/$/;"	m	struct:inode
i_dev	include/sys/fs.h	/^	int	i_dev;$/;"	m	struct:inode
i_mode	include/sys/fs.h	/^	u32	i_mode;		\/**< Accsess mode *\/$/;"	m	struct:inode
i_nr_sects	include/sys/fs.h	/^	u32	i_nr_sects;	\/**< How many sectors the file occupies *\/$/;"	m	struct:inode
i_num	include/sys/fs.h	/^	int	i_num;		\/**< inode nr.  *\/$/;"	m	struct:inode
i_size	include/sys/fs.h	/^	u32	i_size;		\/**< File size *\/$/;"	m	struct:inode
i_start_sect	include/sys/fs.h	/^	u32	i_start_sect;	\/**< The first sector of the data *\/$/;"	m	struct:inode
ibuf	include/sys/tty.h	/^	u32	ibuf[TTY_IN_BYTES];	\/* TTY input buffer *\/$/;"	m	struct:s_tty
ibuf_cnt	include/sys/tty.h	/^	int	ibuf_cnt;		\/* how many *\/$/;"	m	struct:s_tty
ibuf_head	include/sys/tty.h	/^	u32*	ibuf_head;		\/* the next free slot *\/$/;"	m	struct:s_tty
ibuf_tail	include/sys/tty.h	/^	u32*	ibuf_tail;		\/* the val to be processed by TTY *\/$/;"	m	struct:s_tty
idt	include/sys/global.h	/^EXTERN	struct gate		idt[IDT_SIZE];$/;"	v	typeref:struct:gate
idt_ptr	include/sys/global.h	/^EXTERN	u8			idt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
in_byte	lib/kliba.asm	/^in_byte:$/;"	l
in_process	kernel/tty.c	/^PUBLIC void in_process(TTY* tty, u32 key)$/;"	f
inc	boot/boot.asm	/^	inc	di$/;"	d
inc	boot/loader.asm	/^	inc	di$/;"	d
inform_int	kernel/proc.c	/^PUBLIC void inform_int(int task_nr)$/;"	f
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f
init_clock	kernel/clock.c	/^PUBLIC void init_clock()$/;"	f
init_descriptor	kernel/protect.c	/^PRIVATE void init_descriptor(struct descriptor * p_desc, u32 base, u32 limit, u16 attribute)$/;"	f
init_fs	fs/main.c	/^PRIVATE void init_fs()$/;"	f
init_hd	kernel/hd.c	/^PRIVATE void init_hd()$/;"	f
init_idt_desc	kernel/protect.c	/^PUBLIC void init_idt_desc(unsigned char vector, u8 desc_type, int_handler handler, unsigned char privilege)$/;"	f
init_keyboard	kernel/keyboard.c	/^PUBLIC void init_keyboard()$/;"	f
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f
init_screen	kernel/console.c	/^PUBLIC void init_screen(TTY* tty)$/;"	f
init_tty	kernel/tty.c	/^PRIVATE void init_tty(TTY* tty)$/;"	f
initial_eip	include/sys/proc.h	/^	task_f	initial_eip;$/;"	m	struct:task
inode	include/sys/fs.h	/^struct inode {$/;"	s
inode_isize_off	include/sys/fs.h	/^	u32	inode_isize_off;  \/**< Offset of `struct inode::i_size' *\/$/;"	m	struct:super_block
inode_nr	include/sys/fs.h	/^	int	inode_nr;		\/**< inode nr. *\/$/;"	m	struct:dir_entry
inode_size	include/sys/fs.h	/^	u32	inode_size;       \/**< INODE_SIZE *\/$/;"	m	struct:super_block
inode_start_off	include/sys/fs.h	/^	u32	inode_start_off;  \/**< Offset of `struct inode::i_start_sect' *\/$/;"	m	struct:super_block
inode_table	include/sys/global.h	/^EXTERN	struct inode		inode_table[NR_INODE];$/;"	v	typeref:struct:inode
int_handler	include/type.h	/^typedef	void	(*int_handler)	();$/;"	t
interrupt_wait	kernel/hd.c	/^PRIVATE void interrupt_wait()$/;"	f
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
iobase	include/sys/protect.h	/^	u16	iobase;	\/* I\/O位图基址大于或等于TSS段界限，就表示没有I\/O许可位图 *\/$/;"	m	struct:tss
irq_handler	include/type.h	/^typedef	void	(*irq_handler)	(int irq);$/;"	t
irq_table	kernel/global.c	/^PUBLIC	irq_handler	irq_table[NR_IRQ];$/;"	v
is_current_console	kernel/console.c	/^PUBLIC int is_current_console(CONSOLE* con)$/;"	f
is_full	include/sys/console.h	/^	int		is_full;$/;"	m	struct:s_console
is_special	include/sys/const.h	253;"	d
itoa	lib/klib.c	/^PUBLIC char * itoa(char * str, int num)\/* 数字前面的 0 不被显示出来, 比如 0000B800 被显示成 B800 *\/$/;"	f
k_reenter	include/sys/global.h	/^EXTERN	u32	k_reenter;$/;"	v
kb_ack	kernel/keyboard.c	/^PRIVATE void kb_ack()$/;"	f
kb_in	kernel/keyboard.c	/^PRIVATE	struct kb_inbuf	kb_in;$/;"	v	typeref:struct:kb_inbuf
kb_inbuf	include/sys/keyboard.h	/^struct kb_inbuf {$/;"	s
kb_wait	kernel/keyboard.c	/^PRIVATE void kb_wait()	\/* 等待 8042 的输入缓冲区空 *\/$/;"	f
kernel_esp	include/sys/proc.h	/^	u32	kernel_esp;	\/* <- 'popad' will ignore it			│			*\/$/;"	m	struct:stackframe
kernel_main	kernel/main.c	/^PUBLIC int kernel_main()$/;"	f
key_pressed	include/sys/global.h	/^EXTERN	int	key_pressed; \/**$/;"	v
keyboard_handler	kernel/keyboard.c	/^PUBLIC void keyboard_handler(int irq)$/;"	f
keyboard_read	kernel/keyboard.c	/^PUBLIC void keyboard_read(TTY* tty)$/;"	f
keymap	include/sys/keymap.h	/^u32 keymap[NR_SCAN_CODES * MAP_COLS] = {$/;"	v
lba_high	include/sys/hd.h	/^	u8	lba_high;$/;"	m	struct:hd_cmd
lba_low	include/sys/hd.h	/^	u8	lba_low;$/;"	m	struct:hd_cmd
lba_mid	include/sys/hd.h	/^	u8	lba_mid;$/;"	m	struct:hd_cmd
ldt	include/sys/protect.h	/^	u32	ldt;$/;"	m	struct:tss
ldt_seg_linear	kernel/proc.c	/^PUBLIC int ldt_seg_linear(struct proc* p, int idx)$/;"	f
ldt_sel	include/sys/proc.h	/^	u16 ldt_sel;               \/* gdt selector giving ldt base and limit *\/$/;"	m	struct:proc
ldts	include/sys/proc.h	/^	struct descriptor ldts[LDT_SIZE]; \/* local descs for code and data *\/$/;"	m	struct:proc	typeref:struct:proc::descriptor
limit_high_attr2	include/sys/protect.h	/^	u8	limit_high_attr2;	\/* G(1) D(1) 0(1) AVL(1) LimitHigh(4) *\/$/;"	m	struct:descriptor
limit_low	include/sys/protect.h	/^	u16	limit_low;		\/* Limit *\/$/;"	m	struct:descriptor
logical	include/sys/hd.h	/^	struct part_info	logical[NR_SUB_PER_DRIVE];$/;"	m	struct:hd_info	typeref:struct:hd_info::part_info
m1	include/type.h	/^		struct mess1 m1;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess1
m1i1	include/type.h	/^	int m1i1;$/;"	m	struct:mess1
m1i2	include/type.h	/^	int m1i2;$/;"	m	struct:mess1
m1i3	include/type.h	/^	int m1i3;$/;"	m	struct:mess1
m1i4	include/type.h	/^	int m1i4;$/;"	m	struct:mess1
m2	include/type.h	/^		struct mess2 m2;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess2
m2p1	include/type.h	/^	void* m2p1;$/;"	m	struct:mess2
m2p2	include/type.h	/^	void* m2p2;$/;"	m	struct:mess2
m2p3	include/type.h	/^	void* m2p3;$/;"	m	struct:mess2
m2p4	include/type.h	/^	void* m2p4;$/;"	m	struct:mess2
m3	include/type.h	/^		struct mess3 m3;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess3
m3i1	include/type.h	/^	int	m3i1;$/;"	m	struct:mess3
m3i2	include/type.h	/^	int	m3i2;$/;"	m	struct:mess3
m3i3	include/type.h	/^	int	m3i3;$/;"	m	struct:mess3
m3i4	include/type.h	/^	int	m3i4;$/;"	m	struct:mess3
m3l1	include/type.h	/^	u64	m3l1;$/;"	m	struct:mess3
m3l2	include/type.h	/^	u64	m3l2;$/;"	m	struct:mess3
m3p1	include/type.h	/^	void*	m3p1;$/;"	m	struct:mess3
m3p2	include/type.h	/^	void*	m3p2;$/;"	m	struct:mess3
magic	include/sys/fs.h	/^	u32	magic;		  \/**< Magic number *\/$/;"	m	struct:super_block
max	include/sys/const.h	12;"	d
memcmp	lib/misc.c	/^PUBLIC int memcmp(const void * s1, const void *s2, int n)$/;"	f
memcpy	lib/string.asm	/^memcpy:$/;"	l
memset	lib/string.asm	/^memset:$/;"	l
mess1	include/type.h	/^struct mess1 {$/;"	s
mess2	include/type.h	/^struct mess2 {$/;"	s
mess3	include/type.h	/^struct mess3 {$/;"	s
milli_delay	kernel/clock.c	/^PUBLIC void milli_delay(int milli_sec)$/;"	f
min	include/sys/const.h	13;"	d
mkfs	fs/main.c	/^PRIVATE void mkfs()$/;"	f
msg_receive	kernel/proc.c	/^PRIVATE int msg_receive(struct proc* current, int src, MESSAGE* m)$/;"	f
msg_send	kernel/proc.c	/^PRIVATE int msg_send(struct proc* current, int dest, MESSAGE* m)$/;"	f
msgtype	include/sys/const.h	/^enum msgtype {$/;"	g
mul	boot/boot.asm	/^	mul	dh$/;"	d
mul	boot/loader.asm	/^	mul	dh$/;"	d
n_1st_sect	include/sys/fs.h	/^	u32	n_1st_sect;	  \/**< Number of the 1st data sector *\/$/;"	m	struct:super_block
name	include/sys/fs.h	/^	char	name[MAX_FILENAME_LEN];	\/**< Filename *\/$/;"	m	struct:dir_entry
name	include/sys/proc.h	/^	char	name[32];$/;"	m	struct:task
name	include/sys/proc.h	/^	char name[16];		   \/* name of the process *\/$/;"	m	struct:proc
new_dir_entry	fs/open.c	/^PRIVATE void new_dir_entry(struct inode *dir_inode,int inode_nr,char *filename)$/;"	f
new_inode	fs/open.c	/^PRIVATE struct inode * new_inode(int dev, int inode_nr, int start_sect)$/;"	f
next_sending	include/sys/proc.h	/^	struct proc * next_sending;\/**$/;"	m	struct:proc	typeref:struct:proc::proc
nmi	kernel/kernel.asm	/^nmi:$/;"	l
nr_imap_sects	include/sys/fs.h	/^	u32	nr_imap_sects;	  \/**< How many inode-map sectors *\/$/;"	m	struct:super_block
nr_inode_sects	include/sys/fs.h	/^	u32	nr_inode_sects;   \/**< How many inode sectors *\/$/;"	m	struct:super_block
nr_inodes	include/sys/fs.h	/^	u32	nr_inodes;	  \/**< How many inodes *\/$/;"	m	struct:super_block
nr_sects	include/sys/fs.h	/^	u32	nr_sects;	  \/**< How many sectors *\/$/;"	m	struct:super_block
nr_sects	include/sys/hd.h	/^	u32 nr_sects;		\/**$/;"	m	struct:part_ent
nr_smap_sects	include/sys/fs.h	/^	u32	nr_smap_sects;	  \/**< How many sector-map sectors *\/$/;"	m	struct:super_block
num_lock	kernel/keyboard.c	/^PRIVATE	int		num_lock;	\/* Num Lock		*\/$/;"	v
offset_high	include/sys/protect.h	/^	u16	offset_high;	\/* Offset High *\/$/;"	m	struct:gate
offset_low	include/sys/protect.h	/^	u16	offset_low;	\/* Offset Low *\/$/;"	m	struct:gate
open	lib/open.c	/^PUBLIC int open(const char *pathname, int flags)$/;"	f
open_cnt	include/sys/hd.h	/^	int			open_cnt;$/;"	m	struct:hd_info
org	boot/loader.asm	/^org  0100h$/;"	l
orig	include/sys/console.h	/^	unsigned int	orig;	    \/* start addr of the console *\/$/;"	m	struct:s_console
out_byte	lib/kliba.asm	/^out_byte:$/;"	l
out_char	kernel/console.c	/^PUBLIC void out_char(CONSOLE* con, char ch)$/;"	f
overflow	kernel/kernel.asm	/^overflow:$/;"	l
p_flags	include/sys/proc.h	/^	int  p_flags;              \/**$/;"	m	struct:proc
p_head	include/sys/keyboard.h	/^	char*	p_head;			\/* 指向缓冲区中下一个空闲位置 *\/$/;"	m	struct:kb_inbuf
p_msg	include/sys/proc.h	/^	MESSAGE * p_msg;$/;"	m	struct:proc
p_proc_ready	include/sys/global.h	/^EXTERN	struct proc*	p_proc_ready;$/;"	v	typeref:struct:proc
p_recvfrom	include/sys/proc.h	/^	int p_recvfrom;$/;"	m	struct:proc
p_sendto	include/sys/proc.h	/^	int p_sendto;$/;"	m	struct:proc
p_tail	include/sys/keyboard.h	/^	char*	p_tail;			\/* 指向键盘任务应处理的字节 *\/$/;"	m	struct:kb_inbuf
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
panic	kernel/main.c	/^PUBLIC void panic(const char *fmt, ...)$/;"	f
part_ent	include/sys/hd.h	/^struct part_ent {$/;"	s
part_info	include/sys/hd.h	/^struct part_info {$/;"	s
partition	kernel/hd.c	/^PRIVATE void partition(int device, int style)$/;"	f
pcaller	include/sys/global.h	/^EXTERN	struct proc *		pcaller;$/;"	v	typeref:struct:proc
phys_copy	include/string.h	21;"	d
phys_set	include/string.h	22;"	d
pid	include/sys/proc.h	/^	u32 pid;                   \/* process id passed in from MM *\/$/;"	m	struct:proc
pop	boot/boot.asm	/^	pop	dx$/;"	d
pop	boot/loader.asm	/^	pop	dx$/;"	d
pop	kernel/kernel.asm	/^	pop	ds$/;"	d
port_read	lib/kliba.asm	/^port_read:$/;"	l
port_write	lib/kliba.asm	/^port_write:$/;"	l
primary	include/sys/hd.h	/^	struct part_info	primary[NR_PRIM_PER_DRIVE];$/;"	m	struct:hd_info	typeref:struct:hd_info::part_info
print_hdinfo	kernel/hd.c	/^PRIVATE void print_hdinfo(struct hd_info * hdi)$/;"	f
print_identify_info	kernel/hd.c	/^PRIVATE void print_identify_info(u16* hdinfo)$/;"	f
printf	lib/printf.c	/^PUBLIC int printf(const char *fmt, ...)$/;"	f
printl	lib/printf.c	/^PUBLIC int printl(const char *fmt, ...)$/;"	f
printx	lib/syscall.asm	/^printx:$/;"	l
priority	include/sys/proc.h	/^        int priority;$/;"	m	struct:proc
proc	include/sys/proc.h	/^struct proc {$/;"	s
proc2pid	include/sys/proc.h	77;"	d
proc_table	kernel/global.c	/^PUBLIC	struct proc	proc_table[NR_TASKS + NR_PROCS];$/;"	v	typeref:struct:proc
push	boot/boot.asm	/^	push	dx$/;"	d
push	boot/loader.asm	/^	push	dx$/;"	d
push	kernel/kernel.asm	/^        push    ds      ;  |$/;"	d
put_inode	fs/main.c	/^PUBLIC void put_inode(struct inode * pinode)$/;"	f
put_irq_handler	kernel/i8259.c	/^PUBLIC void put_irq_handler(int irq, irq_handler handler)$/;"	f
put_key	kernel/tty.c	/^PRIVATE void put_key(TTY* tty, u32 key)$/;"	f
q_sending	include/sys/proc.h	/^	struct proc * q_sending;   \/**$/;"	m	struct:proc	typeref:struct:proc::proc
read	lib/read.c	/^PUBLIC int read(int fd, void *buf, int count)$/;"	f
read_super_block	fs/main.c	/^PRIVATE void read_super_block(int dev)$/;"	f
regs	include/sys/proc.h	/^	struct stackframe regs;    \/* process registers saved in stack frame *\/$/;"	m	struct:proc	typeref:struct:proc::stackframe
reset_msg	kernel/proc.c	/^PUBLIC void reset_msg(MESSAGE* p)$/;"	f
restart	kernel/kernel.asm	/^restart:$/;"	l
restart_reenter	kernel/kernel.asm	/^restart_reenter:$/;"	l
retaddr	include/sys/proc.h	/^	u32	retaddr;	\/* return address for assembly code save()	│			*\/$/;"	m	struct:stackframe
root_inode	include/sys/fs.h	/^	u32	root_inode;       \/**< Inode nr of root directory *\/$/;"	m	struct:super_block
root_inode	include/sys/global.h	/^EXTERN	struct inode *		root_inode;$/;"	v	typeref:struct:inode
rw_sector	fs/main.c	/^PUBLIC int rw_sector(int io_type, int dev, u64 pos, int bytes, int proc_nr,$/;"	f
s_console	include/sys/console.h	/^typedef struct s_console$/;"	s
s_tty	include/sys/tty.h	/^typedef struct s_tty$/;"	s
save	kernel/kernel.asm	/^save:$/;"	l
sb_dev	include/sys/fs.h	/^	int	sb_dev; 	\/**< the super block's home device *\/$/;"	m	struct:super_block
schedule	kernel/proc.c	/^PUBLIC void schedule()$/;"	f
scroll_lock	kernel/keyboard.c	/^PRIVATE	int		scroll_lock;	\/* Scroll Lock		*\/$/;"	v
scroll_screen	kernel/console.c	/^PUBLIC void scroll_screen(CONSOLE* con, int dir)$/;"	f
search_file	fs/misc.c	/^PUBLIC int search_file(char * path)$/;"	f
seg2phys	kernel/protect.c	/^PUBLIC u32 seg2phys(u16 seg)$/;"	f
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
select_console	kernel/console.c	/^PUBLIC void select_console(int nr_console)$/;"	f
selector	include/sys/protect.h	/^	u16	selector;	\/* Selector *\/$/;"	m	struct:gate
send_recv	kernel/proc.c	/^PUBLIC int send_recv(int function, int src_dest, MESSAGE* msg)$/;"	f
sendrec	lib/syscall.asm	/^sendrec:$/;"	l
set_cursor	kernel/console.c	/^PRIVATE void set_cursor(unsigned int position)$/;"	f
set_leds	kernel/keyboard.c	/^PRIVATE void set_leds()$/;"	f
set_video_start_addr	kernel/console.c	/^PRIVATE void set_video_start_addr(u32 addr)$/;"	f
shift_l	kernel/keyboard.c	/^PRIVATE	int		shift_l;	\/* l shift state	*\/$/;"	v
shift_r	kernel/keyboard.c	/^PRIVATE	int		shift_r;	\/* r shift state	*\/$/;"	v
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
size	include/sys/hd.h	/^	u32	size;	\/* how many sectors in this partition *\/$/;"	m	struct:part_info
source	include/type.h	/^	int source;$/;"	m	struct:__anon1
spin	lib/misc.c	/^PUBLIC void spin(char * func_name)$/;"	f
sprintf	lib/vsprintf.c	/^int sprintf(char *buf, const char *fmt, ...)$/;"	f
spurious_irq	kernel/i8259.c	/^PUBLIC void spurious_irq(int irq)$/;"	f
ss	include/sys/proc.h	/^	u32	ss;		\/*  ┛						┷High			*\/$/;"	m	struct:stackframe
ss	include/sys/protect.h	/^	u32	ss;$/;"	m	struct:tss
ss0	include/sys/protect.h	/^	u32	ss0;		\/*   "   segment  "  "    "        "     *\/$/;"	m	struct:tss
ss1	include/sys/protect.h	/^	u32	ss1;$/;"	m	struct:tss
ss2	include/sys/protect.h	/^	u32	ss2;$/;"	m	struct:tss
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
stackframe	include/sys/proc.h	/^struct stackframe {	\/* proc_ptr points here				↑ Low			*\/$/;"	s
stacksize	include/sys/proc.h	/^	int	stacksize;$/;"	m	struct:task
start_cyl	include/sys/hd.h	/^	u8 start_cyl;		\/**$/;"	m	struct:part_ent
start_head	include/sys/hd.h	/^	u8 start_head;		\/**$/;"	m	struct:part_ent
start_sect	include/sys/hd.h	/^	u32 start_sect;	\/**$/;"	m	struct:part_ent
start_sector	include/sys/hd.h	/^	u8 start_sector;	\/**$/;"	m	struct:part_ent
strcat	lib/misc.c	/^PUBLIC char * strcat(char * s1, const char *s2)$/;"	f
strcmp	lib/misc.c	/^PUBLIC int strcmp(const char * s1, const char *s2)$/;"	f
strcpy	lib/string.asm	/^strcpy:$/;"	l
strip_path	fs/misc.c	/^PUBLIC int strip_path(char * filename, const char * pathname,$/;"	f
strlen	lib/string.asm	/^strlen:$/;"	l
super_block	include/sys/fs.h	/^struct super_block {$/;"	s
super_block	include/sys/global.h	/^EXTERN	struct super_block	super_block[NR_SUPER_BLOCK];$/;"	v	typeref:struct:super_block
sync_inode	fs/main.c	/^PUBLIC void sync_inode(struct inode * p)$/;"	f
sys_call	kernel/kernel.asm	/^sys_call:$/;"	l
sys_call_table	kernel/global.c	/^PUBLIC	system_call	sys_call_table[NR_SYS_CALL] = {sys_printx,$/;"	v
sys_id	include/sys/hd.h	/^	u8 sys_id;		\/**$/;"	m	struct:part_ent
sys_printx	kernel/tty.c	/^PUBLIC int sys_printx(int _unused1, int _unused2, char* s, struct proc* p_proc)$/;"	f
sys_sendrec	kernel/proc.c	/^PUBLIC int sys_sendrec(int function, int src_dest, MESSAGE* m, struct proc* p)$/;"	f
syslog	lib/syslog.c	/^PUBLIC int syslog(const char *fmt, ...)$/;"	f
system_call	include/type.h	/^typedef void*	system_call;$/;"	t
szMemChkTitle	boot/loader.asm	/^szMemChkTitle		equ	LOADER_PHY_ADDR + _szMemChkTitle$/;"	d
szRAMSize	boot/loader.asm	/^szRAMSize		equ	LOADER_PHY_ADDR + _szRAMSize$/;"	d
szReturn	boot/loader.asm	/^szReturn		equ	LOADER_PHY_ADDR + _szReturn$/;"	d
task	include/sys/proc.h	/^struct task {$/;"	s
task_f	include/type.h	/^typedef	void	(*task_f)	();$/;"	t
task_fs	fs/main.c	/^PUBLIC void task_fs()$/;"	f
task_hd	kernel/hd.c	/^PUBLIC void task_hd()$/;"	f
task_stack	kernel/global.c	/^PUBLIC	char		task_stack[STACK_SIZE_TOTAL];$/;"	v
task_sys	kernel/systask.c	/^PUBLIC void task_sys()$/;"	f
task_table	kernel/global.c	/^PUBLIC	struct task	task_table[NR_TASKS] = {$/;"	v	typeref:struct:task
task_tty	kernel/tty.c	/^PUBLIC void task_tty()$/;"	f
ticks	include/sys/global.h	/^EXTERN	int	ticks;$/;"	v
ticks	include/sys/proc.h	/^        int ticks;                 \/* remained ticks *\/$/;"	m	struct:proc
times	boot/boot.asm	/^times 	510-($-$$)	db	0	; 填充剩下的空间，使生成的二进制代码恰好为512字节$/;"	l
trap	include/sys/protect.h	/^	u16	trap;$/;"	m	struct:tss
tss	include/sys/global.h	/^EXTERN	struct tss	tss;$/;"	v	typeref:struct:tss
tss	include/sys/protect.h	/^struct tss {$/;"	s
tty_caller	include/sys/tty.h	/^	int	tty_caller;$/;"	m	struct:s_tty
tty_dev_read	kernel/tty.c	/^PRIVATE void tty_dev_read(TTY* tty)$/;"	f
tty_dev_write	kernel/tty.c	/^PRIVATE void tty_dev_write(TTY* tty)$/;"	f
tty_do_read	kernel/tty.c	/^PRIVATE void tty_do_read(TTY* tty, MESSAGE* msg)$/;"	f
tty_do_write	kernel/tty.c	/^PRIVATE void tty_do_write(TTY* tty, MESSAGE* msg)$/;"	f
tty_left_cnt	include/sys/tty.h	/^	int	tty_left_cnt;$/;"	m	struct:s_tty
tty_procnr	include/sys/tty.h	/^	int	tty_procnr;$/;"	m	struct:s_tty
tty_req_buf	include/sys/tty.h	/^	void*	tty_req_buf;$/;"	m	struct:s_tty
tty_table	kernel/global.c	/^PUBLIC	TTY		tty_table[NR_CONSOLES];$/;"	v
tty_trans_cnt	include/sys/tty.h	/^	int	tty_trans_cnt;$/;"	m	struct:s_tty
type	include/type.h	/^	int type;$/;"	m	struct:__anon1
u	include/type.h	/^	} u;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2
u16	include/type.h	/^typedef	unsigned short		u16;$/;"	t
u32	include/type.h	/^typedef	unsigned int		u32;$/;"	t
u64	include/type.h	/^typedef	unsigned long long	u64;$/;"	t
u8	include/type.h	/^typedef	unsigned char		u8;$/;"	t
unblock	kernel/proc.c	/^PRIVATE void unblock(struct proc* p)$/;"	f
unlink	lib/unlink.c	/^PUBLIC int unlink(const char * pathname)$/;"	f
user_proc_table	kernel/global.c	/^PUBLIC	struct task	user_proc_table[NR_PROCS] = {$/;"	v	typeref:struct:task
va2la	kernel/proc.c	/^PUBLIC void* va2la(int pid, void* va)$/;"	f
va_list	include/type.h	/^typedef	char *			va_list;$/;"	t
vir2phys	include/sys/protect.h	154;"	d
vsprintf	lib/vsprintf.c	/^PUBLIC int vsprintf(char *buf, const char *fmt, va_list args)$/;"	f
wRootDirSizeForLoop	boot/boot.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数, 在循环中会递减至零.$/;"	d
wRootDirSizeForLoop	boot/loader.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数$/;"	d
wSectorNo	boot/boot.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
wSectorNo	boot/loader.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
w_copy	kernel/console.c	/^PRIVATE	void w_copy(unsigned int dst, const unsigned int src, int size)$/;"	f
waitfor	kernel/hd.c	/^PRIVATE int waitfor(int mask, int val, int timeout)$/;"	f
write	lib/write.c	/^PUBLIC int write(int fd, const void *buf, int count)$/;"	f
